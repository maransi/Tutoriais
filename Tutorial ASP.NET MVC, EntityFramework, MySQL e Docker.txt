Tutorial ASP.NET MVC, EntityFramework, MySQL e Docker
-----------------------------------------------------

Baseado nos artigos:

https://www.macoratti.net/19/01/aspn_lnxsite1.htm
https://www.macoratti.net/19/01/aspn_lnxsite2.htm
https://www.macoratti.net/19/01/intro_docker11.htm
https://www.macoratti.net/19/01/intro_docker12.htm
https://www.macoratti.net/19/01/intro_docker13.htm

https://www.macoratti.net/19/01/intro_docker7.htm

# Analisar o artigo a partir do link abaixo
https://www.macoratti.net/19/01/intro_docker1.htm   

# Docker Compose com Mysql e .Net
https://macoratti.net/21/06/docker_apimysql2.htm

1. Instalando o Docker

    . No caso do windows, acesse a URL abaixo e baixe o instalador:

        https://store.docker.com/editions/community/docker-ce-desktop-windows

    . Utilizar a versão Community Edition (CE)

    . No caso do Linux execute os comandos abaixo no prompt no terminal:

        . A URL abaixo tem os passos atualizado para instalação do Docker:

            https://docs.docker.com/engine/install/ubuntu/

        . Instalação Atualizada

            sudo apt-get update
            sudo apt-get install \
                ca-certificates \
                curl \
                gnupg \
                lsb-release

            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

            echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            sudo apt-get update
            sudo apt-get install docker-ce docker-ce-cli containerd.io
            sudo docker --version

            sudo groupadd docker
            sudo gpasswd -a <usuario> docker
            sudo chown "$USER":"$USER" /var/run/docker.sock -R
            sudo service docker restart

            docker --version


2. Crie o container do mysql:

    docker container run -d --name mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7

    # Ao executar o comando abaixo, entraremos na linha de comando do container. Digite o comando abaixo:
    #
    #   mysql -u root -p
    #
    # Informe a senha "root"
    #
    #       create database desenv;
    #
    docker container exec -it mysql bash



3. Instalando o .NET Core SDK

    . Instalçao Atualizada:

        . URL com informações para realizar a instalação.

            https://docs.microsoft.com/pt-br/dotnet/core/install/linux-ubuntu

            . IMPORTANTE: Acesse a instalação da distribuição e versão especifica do linux que estamos utilizando para 
                            proceder os comandos adequadamente.

                            A instalação abaixo está para o Ubuntu 20.04

        # Instalação do SDK
        wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb

        sudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update

        sudo apt-get install -y gpg
        wget -O - https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o microsoft.asc.gpg
        sudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/
        wget https://packages.microsoft.com/config/ubuntu/{os-version}/prod.list
        sudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list
        sudo chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg
        sudo chown root:root /etc/apt/sources.list.d/microsoft-prod.list

        sudo apt-get update; \
        sudo apt-get install -y apt-transport-https && \
        sudo apt-get update && \
        sudo apt-get install -y dotnet-sdk-6.0

        sudo apt-get install -y apt-transport-https && \
        sudo apt-get update && \
        sudo apt-get install -y aspnetcore-runtime-6.0

        sudo apt-get install -y dotnet-runtime-6.0


4. Instalando o VS Code

    . Instalação das extensões do VSCode

            C# 
            C# Extensions
            C# XML Documentation Comments
            vscode-icons (Opcional)
            Docker

        . Atalhos:

            Ctrl + K + D ou Shit + Alt + F:             Identa todo o seu código automaticamente;
            Ctrl + K + C:                               comenta um bloco de linhas;
            Ctrl + /                                    Comenta a linha
            Ctrl + K + U:                               descomenta um bloco de linhas;
            Alt + Left Arrow:                           durante a programação, volta um método que você estava navegando;
            Alt + Right Arrow:                          durante a programação, avança um método que você estava navegando;
            Ctrl + .:                                   implementa o método/classe inexistente que você acabou de escrever;
            Ctrl + M + O:                               esconde todas as regions da classe atual;
            Ctrl + Shift + B:                           compila todos os projetos;
            F5:                                         manda depurar um projeto;
            Ctrl + F5:                                  manda executar um projeto;
            F10:                                        durante a depuração, avança uma linha;
            F11:                                        durante a depuração, avança uma linha entrando nos detalhes da mesma;


    . Configurar Visual Studio Code para .NETCore

        . Acesse File / Preferences / Settings

        . Digite C#

        . Acesse "C# Configuration / CSharp Format Enabled" e habilite a configuração

        . Digite "Format on save" e habilite a configuração

        . Digite "Final" e habilite a configuração "Files: Insert final newline" e habilite a configuração


5. Crie a pasta da "Solution":

    mkdir ~/workspace-dotnet/mvcDocker

6. Dentro da pasta criada acima cria a "Solution":

    cd ~/workspace-dotnet/mvcDocker

    dotnet new sln -n mvcDocker

6. Dentro da pasta criada acima crie um projeto dotnet MVC:


    dotnet new mvc -o ./src/mvc1 -n mvc1 -f net5.0

    dotnet sln mvcDocker.sln add ./src/mvc1/mvc1.csproj

    cd ~/workspace-dotnet/mvcDocker/src/mvc1

    dotnet add package Microsoft.EntityFrameworkCore --version 5.0.1
    dotnet add package Microsoft.EntityFrameworkCore.Design --version 5.0.1
    dotnet add package Pomelo.EntityFrameworkCore.MySql --version 5.0.0-alpha.2
    dotnet add package Microsoft.EntityFrameworkCore.Tools --version 5.0.1

    dotnet restore

    # Responda "Yes" para criar os arquivos de debug
    code .

7. Dentro da pasta "Models" cria a classe abaixo:

    namespace mvc1.Models
    {
        public class Produto
        {
            public Produto (string nome=null, string categoria=null,
            decimal preco=0)
            {
                this.Nome = nome;
                this.Categoria = categoria;
                this.Preco= preco;
            }

            public int ProdutoId {get; set;}
            public string Nome {get; set;}
            public string Categoria {get; set;}
            public decimal Preco {get; set;}
        }
    }

8. Crie a interface IRepository dentro da pasta "Models":

    using System.Collections.Generic;

    namespace mvc1.Models
    {
        public interface IRepository
        {
            IEnumerable<Produto> Produtos { get; }
        }
    }


9. Classe de repositório:

    using System.Collections.Generic;

    namespace mvc1.Models
    {
        public class ProdutoRepository : IRepository
        {
            private AppDbContext context;
            public ProdutoRepository(AppDbContext ctx) {
                context = ctx;
            }
            public IEnumerable<Produto> Produtos => context.Produtos;

        }
    }

10. Dentro da pasta Models crie o arquivo "AppDbContext"

    using Microsoft.EntityFrameworkCore;

    namespace mvc1.Models
    {
        public class AppDbContext : DbContext
        {
            public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
            {
            }
            public DbSet<Produto> Produtos { get; set; }
        }
    }



11. Altere o "HomeController" como abaixo, Atente para a injeçao de dependência no construtor da classe:

    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.Extensions.Configuration;
    using mvc1.Models;                          // LINHA INCLUIDA

    namespace mvc1.Controllers
    {
        public class HomeController : Controller
        {
            private IRepository repository;         // LINHA INCLUIDA
            private string message;                 // LINHA INCLUIDA
            public HomeController(IRepository repo, IConfiguration config, ILogger<HomeController> logger)  // LINHA ALTERADA
            {
                repository = repo;                              // LINHA ALTERADA
                message = $"Docker - ({config["HOSTNAME"]})";    // LINHA ALTERADA
            }
            public IActionResult Index()
            {
                ViewBag.Message = message;              // ADICIONADO MSG e o REPOSITORIO na VIEW
                return View(repository.Produtos);       // LINHA ALTERADA
            }
        }
    }

12. Altere o código da classe /Views/Home/Index.cshtml pelo abaixo:

    @model IEnumerable<mvc1.Models.Produto>
    @{
        Layout = null;
    }
    <!DOCTYPE html>
    <html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title>App</title>
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    </head>
    <body>
        <div class="m-1 p-1">
            <h4 class="bg-primary text-xs-center p-1 text-white">@ViewBag.Message</h4>
            <table class="table table-sm table-striped">
                <thead>
                    <tr><th>ID</th><th>Nome</th><th>Categoria</th><th>Preco</th></tr>
                </thead>
                <tbody>
                    @foreach (var p in Model) {
                        <tr>
                            <td>@p.ProdutoId</td>
                            <td>@p.Nome</td>
                            <td>@p.Categoria</td>
                            <td>$@p.Preco.ToString("F2")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </body>
    </html>

13. Dentro da pasta Models insira a classe "Populadb" com o código abaixo:

    using System.Linq;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.Extensions.DependencyInjection;

    namespace mvc1.Models
    {
        public static class Populadb
        {
            public static void IncluiDadosDB(IApplicationBuilder app) 
            {
//                        IncluiDadosDB( app.ApplicationServices.GetRequiredService<AppDbContext>() );

                // https://riptutorial.com/asp-net-core/example/17400/using-scoped-services-during-application-startup---database-seeding
                using (var serviceScope = app.ApplicationServices.GetRequiredService<IServiceScopeFactory>().CreateScope())
                {
                    var db = serviceScope.ServiceProvider.GetService<AppDbContext>();

                    IncluiDadosDB( db );
                }

            }
            public static void IncluiDadosDB(AppDbContext context)
            {
                    System.Console.WriteLine("Aplicando Migrations...");
                    context.Database.Migrate();

                    if (!context.Produtos.Any()) 
                    {
                        System.Console.WriteLine("Criando dados...");
                        context.Produtos.AddRange(
                            new Produto("Luvas de goleiro", "Futebol", 25),
                            new Produto("Bola de basquete", "Basquete", 48.95m),
                            new Produto("Bola de Futebol", "Futebol", 19.50m),
                            new Produto("Óculos para natação", "Aquaticos", 34.95m),
                            new Produto("Meias Grandes", "Futebol", 50),
                            new Produto("Calção de banho", "Aquáticos", 16),
                            new Produto("Cesta para quadra", "Basquete", 29.95m)
                        );
                        context.SaveChanges();
                        } else {
                        System.Console.WriteLine("Dados já existem...");
                    }
            }
        }
    }

14. Acesse o arquivo "appsettings.json" e insira a linha abaixo:

    // IMPORTANTE: O IP 172.17.0.2 pode ser adquirido pelo comando "docker exec mysql hostname -I"
    //              ou
    //             Execute "docker container inspect <ID ou nome do container>" e localize a informação que encontra-se em "IPAddress"
    {
        ...,
        "ConnectionStrings": {
                    "DotNetCoreMySQLAppConnection": "server=172.17.0.2; port=3306; database=desenv; user=root; password=root; Persist Security Info=false; Connect Timeout=300; SSL Mode=None"
        }
    }


15. Acrescente essas linhas dentrao do método "ConfigureServices" da classe "Startup":

    ...
    public void ConfigureServices(IServiceCollection services)
    {
        services.Configure<CookiePolicyOptions>(options =>
        {
            // This lambda determines whether user consent for non-essential cookies is needed for a given request.
            options.CheckConsentNeeded = context => true;
            options.MinimumSameSitePolicy = SameSiteMode.None;
        });


        string dbConnectionString = Configuration.GetConnectionString("DotNetCoreMySQLAppConnection");                                      // ADICIONADO
        services.AddDbContext<AppDbContext>(options => options.UseMySql(dbConnectionString, ServerVersion.AutoDetect(dbConnectionString))); // ADICIONADO

        services.AddSingleton<IConfiguration>(Configuration);
        services.AddTransient<IRepository, ProdutoRepository>();    // LINHA ALTERADA

        services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
    }
    ...

    public void Configure( IApplicationBuilder app, ... ){
        ...
        Populadb.IncluiDadosDB(app);    // ADICIONADO   
    }

16. Acesse a linha de comandos na pasta raiz do projeto e digito o comando abaixo:

    # Caso não encontre o "dotnet ef" instale com o comando "dotnet tool install --global dotnet-ef"
    dotnet ef migrations add Inicial

    # Verifique no MySQL se o "database" e as "Table" foi contruído com sucesso.
    dotnet ef database update --context AppDbContext

17. Executando o projeto:

    dotnet clean
    dotnet restore
    dotnet build
    dotnet run

18. Execute a URL abaixo no navegador

    localhost:5001




Trabalhando com Dockerfile com imagens
------------------------------------

1. Limpando o ambiente

    docker container rm -f $(docker ps -aq)

    docker image rm $(docker images -a -q)
    
    docker volume prune



// 2. Publicação da aplicação - Acesse a pasta raiz do projeto ASP.NET e execute o comando abaixo:
//
//    rm dist/ -R
//
//    dotnet publish --configuration Realease --output dist

3. Criar um arquivo "Dockerfile" com conteúdo abaixo na pasta raiz do projeto "mvc1"

https://collabnix.com/getting-started-with-docker-multi-stage-builds/
https://hovermind.com/kubernetes/understanding-dockerfile.html
https://www.cherryservers.com/blog/docker-multistage-build
https://www.youtube.com/watch?v=vIfS9bZVBaw
https://www.youtube.com/watch?v=zP4lInIwfXg


//    FROM mcr.microsoft.com/dotnet/sdk:5.0
//    LABEL version="1.0.1" description="Aplicação ASP.NET Core MVC"
//    COPY dist app/
//    WORKDIR /app
//    EXPOSE 5000
//    ENV ASPNETCORE_URLS=http://*:5000
//    ENTRYPOINT ["dotnet","mvc1.dll"]

    FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base
    LABEL version="1.0.1" description="Aplicação ASP.NET Core MVC"
    WORKDIR /app
    EXPOSE 5000
    ENV ASPNETCORE_URLS=http://*:5000

    FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build
    WORKDIR "/src/mvc1"
    COPY ["mvc1.csproj", "."]
    RUN dotnet restore "./mvc1.csproj"
    COPY . .
    # WORKDIR "/src/mvc1"
    RUN dotnet build "./mvc1.csproj" -c Release -o /app/build

    FROM build AS publish
    RUN dotnet publish "./mvc1.csproj" -c Release -o /app/publish

    FROM base AS final
    WORKDIR /app
    COPY --from=publish /app/publish .
    ENTRYPOINT ["dotnet", "mvc1.dll"]

4. Execute o comando abaixo na pasta raiz do projeto "mvc1"

    docker build -t aspnetcoremvc/app:1.0 .

5. Confira se a imagem foi criada com sucesso:

    docker images

6. Crie o container do mysql:

    docker container run -d --name mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7

    # Ao executar o comando abaixo, entraremos na linha de comando do container. Digite o comando abaixo:
    #
    #   mysql -u root -p
    #
    # Informe a senha "root"
    #
    #       create database desenv;
    #
    docker container exec -it mysql bash

    # Verifique no MySQL se o "database" e as "Table" foi contruído com sucesso.
    #
    # PROCEDIMENTO PODE SER OPCIONAL, TENTE NÃO EXECUTÁ-LO PARA VER SE REALMENTE É NECESSÁRIO
    #
    #dotnet ef database update --context AppDbContext

7. Certifique-se que o IP do container "mysql" é o mesmo configurado dentro da string de conexão localizada no arquivo "appsettings.json"

7. Crie o container com o comando abaixo:

    docker container create -p 500:5000 --name mvcprodutos aspnetcoremvc/app:1.0 

    docker container ps -a

    docker container start mvcprodutos

8. Acesse o navegador e execute a URL abaixo:

    localhost:500







Trabalhando com volumes
-----------------------

1. Limpando o ambiente

    docker container rm -f $(docker ps -aq)

    docker volume prune

    docker image rm $(docker images -a -q)

2. Recriando o ambiente:

    docker volume create --name produtosdata

    docker container run -d --name mysql -v produtosdata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e bind-address=0.0.0 mysql:5.7

    # Ao executar o comando abaixo, entraremos na linha de comando do container. Digite o comando abaixo:
    #
    #   mysql -u root -p
    #
    # Informe a senha "root"
    #
    #
    #   create database desenv;
    #   use desenv;
    #   create table Produtos( id int, name varchar(30));
    #   select * from Produtos;
    #
    docker exec mysql bash     

    ou 

    docker exec -it mysql mysql -u root -p

    ou 

    docker exec mysql hostname -I

    mysql -u root -p -h <IP do container acima>


3. Apagar o container do mysql e criar outro container mysql apontando para o volume criado no passo 2. Ao final
    se tudo der certo os dados criados inicialmente sobrevirá a eliminação do container, pois eles foram guardados
    no volume.

    docker container rm -f mysql

    docker container run -d --name mysql -v produtosdata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e bind-address=0.0.0.0 mysql:5.7

    # Ao executar o comando abaixo, entraremos na linha de comando do container. Digite o comando abaixo:
    #
    #   mysql -u root -p
    #
    # Informe a senha "root"
    #
    #   use desenv;
    #   select * from Produtos;
    #
    docker container exec -it mysql bash

4. Podemos substituir um volume por uma pasta fisica ao criar o container

    docker container run -d --name mysql -v /home/marco/mysql-docker:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e bind-address=0.0.0.0 mysql:5.7

// PAREI AQUI


Trabalhando com Docker Compose
------------------------------

1. Altere o arquivo "Dockerfile" da aplicação como abaixo:

    FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base
    LABEL version="1.0.1" description="Aplicação ASP.NET Core MVC"
    WORKDIR /app
    EXPOSE 5000
    ENV ASPNETCORE_URLS=http://*:5000

    FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build
    WORKDIR "/src/mvc1"
    COPY ["./src/mvc1/mvc1.csproj", "."]
    RUN dotnet restore "mvc1.csproj"
    COPY . .
    # WORKDIR "/src/mvc1"
    RUN dotnet build "./src/mvc1/mvc1.csproj" -c Release -o /app/build

    FROM build AS publish
    RUN dotnet publish "./src/mvc1/mvc1.csproj" -c Release -o /app/publish

    FROM base AS final
    WORKDIR /app
    COPY --from=publish /app/publish .
    ENTRYPOINT ["dotnet", "mvc1.dll"]

2. Crie o arquivo "docker-compose.yml" com o conteúdo abaixo:

    version: '3.4'
    services:
    mvcdocker:
        image: ${DOCKER_REGISTRY-}mvcdocker
        container_name: mvcdocker
        build:
        context: .
        dockerfile: ./src/mvc1/Dockerfile
        depends_on: 
        - database
        ports:
        - "5000:5000"
        restart: always
        environment: 
        - DBHOST=database
        - ASPNETCORE_ENVIRONMENT=Development
    database:
        image: mysql:8.0.22             # Vamos mudar para a versão 8 do banco
        container_name: mysqldb
        ports:
        - "3306:3306"
        expose: 
        - 3306
        volumes:
        - db-volume:/var/lib/mysql
        restart: always
        environment: 
        MYSQL_ROOT_PASSWORD: hw8vup5e
        MYSQL_USER: mac
        MYSQL_PASSWORD: hw8vup5e
        MYSQL_DATABASE: productsdb      
    volumes:
    db-volume:

3. Se precisar alterar o endereço IP do banco na conexão, que fica nos arquivos: appsetings.*.json, basta executar o comando abaixo:

    # Na saida localize o valor do item "IPAddress", ou "Gateway" ------------------------------+
    docker container inspect mysqldb |grep -i "IPAddress\|Gateway"                              |
                                                                                                |
    "MacAddress": "02:42:ac:13:00:02",                                                          |
    "NetworkID": "ca2fadce16e20af3390b7f5ce7e242d2a8daff24692383741877a54ccdd06f99",            |
    "EndpointID": "1d2eac1aa2a3ab3773d71001cbc1e0db8408993a7246c2eb6689321ca3e1f49e",           |
    "Gateway": "172.19.0.1",    <---------------------------------------------------------------|
    "IPAddress": "172.19.0.2",  <---------------------------------------------------------------+
    "IPPrefixLen": 16,                                      |
    "IPv6Gateway": "",                                      |
    "GlobalIPv6Address": "",                                |
    "GlobalIPv6PrefixLen": 0,                               |
                                                            |
    #"appsetings.*.json"                                    |
    {                                                       |
        "Logging": {                                        |
            "LogLevel": {                                   |
                "Default": "Information",                   |
                "Microsoft": "Warning",                     |
                "Microsoft.Hosting.Lifetime": "Information" |
            }                                               |   Coloque um dos dois endereços aqui
        },                                                  |   
            "ConnectionStrings": {                          V
                "DotNetCoreMySQLAppConnection": "server=172.19.0.2; port=3306; database=productsdb; user=mac; password=hw8vup5e; Persist Security Info=false; Connect Timeout=300;SSL Mode=None"
        }
    }

4. Execute os comandos abaixo:

    docker compose build

    docker compose up -d

5. Verifique no log dos containeres se conseguiram levantar com sucesso. Também podemos verificar isso através da extensão "Docker" do VSCode.

    docker container logs -f mysqldb  

5. Acesse o link abaixo no navegador

    http://localhost:5000









Trabalhando com redes ( Trabalhando com host e um container "mysql")
---------------------------------------------------------------------

1. Acesse a classe "Startup.cs" no método "ConfigureServices" e deixa-a como abaixo

        public void ConfigureServices(IServiceCollection services)
        {
            var host = Configuration["DBHOST"] ?? "localhost";      // 
            var port = Configuration["DBPORT"] ?? "33600";
            var password = Configuration["DBPASSWORD"] ?? "root";


            string dbConnectionString = String.Format( Configuration.GetConnectionString("DotNetCoreMySQLAppConnection"), host, port, password );
            services.AddDbContext<AppDbContext>(options => options.UseMySql(dbConnectionString, ServerVersion.AutoDetect(dbConnectionString))); 

            ...
        }

2. Certifique-se que o contéudo da linha abaixo seja a mesma do arquivo "appsettings.json":

    {
        ...,
        "ConnectionStrings": {
                    "DotNetCoreMySQLAppConnection": "server={0}; port={1}; database=desenv; user=root; password={2}; Persist Security Info=false; Connect Timeout=300"
        }
    }

3. Crie o container mysql:

    docker container rm mysql
    docker volume create --name produtosdata
    docker container run -d --name mysql -v produtosdata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root  -p 33600:3306 mysql:5.7 


4. Compile o projeto:

    dotnet clean
    dotnet restore
    dotnet build
    dotnet run

5. Acesse o navegador e execute a URL abaixo:

    localhost:5000





Trabalhando com redes ( Trabalhando com dois containeres "appmvc" e "mysql")
----------------------------------------------------------------------------


1. Crie uma rede bridge com o comando abaixo:

    docker network rm net-mysql

    docker network create net-mysql

2. Crie o container mysql:


    docker container rm -f mysql
    docker volume rm -f produtosdata

    docker volume create --name produtosdata
    docker container run -d --name mysql -v produtosdata:/var/lib/mysql --network net-mysql -e MYSQL_ROOT_PASSWORD=root  mysql:5.7 

3. Crie a imagem do projeto:

    docker image rm aspnetcoremvc/app:1.0

    cd ~/workspace-dotnet/mvc4
    rm dist -R
    dotnet publish --configuration Realease --output dist
    docker build -t aspnetcoremvc/app:1.0 .

4. Crie o container da aplicação:

    docker container rm appmvc
    docker container exec mysql hostname -I # -----------------------------------------V
    docker container run -d --name appmvc -p 3000:5000 --network net-mysql -e DBHOST=172.19.0.2  -e DBPORT=3306 -e DBPASSWORD=root aspnetcoremvc/app:1.0

5. Acesse o navegador e execute a URL abaixo:

    localhost:3000



