Tutorial ASP.NET MVC, EntityFramework, MySQL e Docker
-----------------------------------------------------

Baseado nos artigos:

https://www.macoratti.net/19/01/aspn_lnxsite1.htm
https://www.macoratti.net/19/01/aspn_lnxsite2.htm
https://www.macoratti.net/19/01/intro_docker11.htm
https://www.macoratti.net/19/01/intro_docker12.htm
https://www.macoratti.net/19/01/intro_docker13.htm

https://www.macoratti.net/19/01/intro_docker7.htm

# Analisar o artigo a partir do link abaixo
https://www.macoratti.net/19/01/intro_docker1.htm   

# Docker Compose com Mysql e .Net
https://macoratti.net/21/06/docker_apimysql2.htm

1. Instalando o Docker

    . No caso do windows, acesse a URL abaixo e baixe o instalador:

        https://store.docker.com/editions/community/docker-ce-desktop-windows

    . Utilizar a versão Community Edition (CE)

    . No caso do Linux execute os comandos abaixo no prompt no terminal:

        . A URL abaixo tem os passos atualizado para instalação do Docker:

            https://docs.docker.com/engine/install/ubuntu/

        . Instalação Atualizada

            sudo apt-get update
            sudo apt-get install \
                ca-certificates \
                curl \
                gnupg \
                lsb-release

            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

            echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            sudo apt-get update
            sudo apt-get install docker-ce docker-ce-cli containerd.io
            sudo docker --version

            sudo groupadd docker
            sudo gpasswd -a <usuario> docker
            sudo chown "$USER":"$USER" /var/run/docker.sock -R
            sudo service docker restart

            docker --version


2. Crie o container do mysql:

    # docker run -d --name mysqldb -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 mysql:5.7 
    docker run -d --name mysqldb -e MYSQL_ROOT_PASSWORD=root -p 3306:3306  mysql:5.7 

    # Ao executar o comando abaixo, entraremos na linha de comando do container. Digite o comando abaixo:
    #
    #   mysql -u root -p
    #
    # Informe a senha "root"
    #
    #       create database desenv;
    #
    docker container exec -it mysql bash



3. Instalando o .NET Core SDK

	wget https://dot.net/v1/dotnet-install.sh

	chmod +x dotnet-install.sh

	./dotnet-install.sh -c 3.1
	./dotnet-install.sh -c 5.0
	./dotnet-install.sh -c 6.0
	./dotnet-install.sh -c 8.0
	
    # Se o bash shell for o padrão do linux execute as duas linha abaixo
    echo 'export PATH="/home/$USER/.dotnet:/home/$USER/.dotnet/tools:$PATH"' >> ~/.bashrc

	source ~/.bashrc

    # Se o zsh shell for o padrão do linux execute as duas linha abaixo
    echo 'export PATH="/home/$USER/.dotnet:/home/$USER/.dotnet/tools:$PATH"' >> ~/.zshrc

	source ~/.zshrc

    # Caso for o Fish Shell, insira na primeira linha do arquivo "~/.config/fish/config.fish" a linha abaixo
    set -x PATH $PATH /home/$USER/.dotnet /home/$USER/.dotnet/tools

	dotnet --info
	dotnet --version
	dotnet --list-runtimes
	dotnet --list-sdks

4. Instalando o VS Code

    . Instalação das extensões do VSCode

            C# 
            C# Extensions
            C# XML Documentation Comments
            vscode-icons (Opcional)
            Docker

        . Atalhos:

            Ctrl + K + D ou Shit + Alt + F:             Identa todo o seu código automaticamente;
            Ctrl + K + C:                               comenta um bloco de linhas;
            Ctrl + /                                    Comenta a linha
            Ctrl + K + U:                               descomenta um bloco de linhas;
            Alt + Left Arrow:                           durante a programação, volta um método que você estava navegando;
            Alt + Right Arrow:                          durante a programação, avança um método que você estava navegando;
            Ctrl + .:                                   implementa o método/classe inexistente que você acabou de escrever;
            Ctrl + M + O:                               esconde todas as regions da classe atual;
            Ctrl + Shift + B:                           compila todos os projetos;
            F5:                                         manda depurar um projeto;
            Ctrl + F5:                                  manda executar um projeto;
            F10:                                        durante a depuração, avança uma linha;
            F11:                                        durante a depuração, avança uma linha entrando nos detalhes da mesma;


    . Configurar Visual Studio Code para .NETCore

        . Acesse File / Preferences / Settings

        . Digite C#

        . Acesse "C# Configuration / CSharp Format Enabled" e habilite a configuração

        . Digite "Format on save" e habilite a configuração

        . Digite "Final" e habilite a configuração "Files: Insert final newline" e habilite a configuração


5. Crie a pasta da "Solution":

    mkdir ~/workspace-dotnet/mvcDocker

6. Dentro da pasta criada acima cria a "Solution":

    cd ~/workspace-dotnet/mvcDocker

    dotnet new sln -n mvcDocker

6. Dentro da pasta criada acima crie um projeto dotnet MVC:

    

    dotnet new mvc -o ./src/mvc1 -n mvc1 -f net5.0

    dotnet sln mvcDocker.sln add ./src/mvc1/mvc1.csproj

    cd ~/workspace-dotnet/mvcDocker/src/mvc1

    dotnet add package Microsoft.EntityFrameworkCore --version 5.0.17
    dotnet add package Microsoft.EntityFrameworkCore.Design --version 5.0.17
    dotnet add package Microsoft.EntityFrameworkCore.Tools --version 5.0.17
    dotnet add package Pomelo.EntityFrameworkCore.MySql --version 5.0.4

    dotnet restore

    cd ~/workspace-dotnet/mvcDocker/

    # Responda "Yes" para criar os arquivos de debug
    # Senão for perguntado para criar os arquivos de debug dentro da pasta ".vscode"
    #   1. acesse o icone de debug na barra lateral do VSCode
    #   2. Acione o link "Create file lauch.json"
    #   3. Escolha a opção ".Net ... .Net5"
    code .

7. Dentro da pasta "Models" do projeto "mvc1" cria a classe abaixo:

    namespace mvc1.Models
    {
        public class Produto
        {
            public Produto (string nome=null, string categoria=null,
            decimal preco=0)
            {
                this.Nome = nome;
                this.Categoria = categoria;
                this.Preco= preco;
            }

            public int ProdutoId {get; set;}
            public string Nome {get; set;}
            public string Categoria {get; set;}
            public decimal Preco {get; set;}
        }
    }

8. Crie a interface IRepository dentro da pasta "Models":

    using System.Collections.Generic;

    namespace mvc1.Models
    {
        public interface IRepository
        {
            IEnumerable<Produto> Produtos { get; }
        }
    }

9. Dentro da pasta Models crie o arquivo "AppDbContext"

    using Microsoft.EntityFrameworkCore;

    namespace mvc1.Models
    {
        public class AppDbContext : DbContext
        {
            public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
            {
            }
            public DbSet<Produto> Produtos { get; set; }
        }
    }

10. Classe de repositório:

    using System.Collections.Generic;

    namespace mvc1.Models
    {
        public class ProdutoRepository : IRepository
        {
            private AppDbContext context;
            public ProdutoRepository(AppDbContext ctx) {
                context = ctx;
            }
            public IEnumerable<Produto> Produtos => context.Produtos;

        }
    }

11. Altere o "HomeController" como abaixo, Atente para a injeçao de dependência no construtor da classe:

    using Microsoft.AspNetCore.Mvc;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.Logging;         // LINHA INCLUIDA
    using mvc1.Models;                          // LINHA INCLUIDA


    namespace mvc1.Controllers
    {
        public class HomeController : Controller
        {
            private IRepository repository;         // LINHA INCLUIDA
            private string message;                 // LINHA INCLUIDA
            public HomeController(IRepository repo, IConfiguration config, ILogger<HomeController> logger)  // LINHA ALTERADA
            {
                repository = repo;                              // LINHA ALTERADA
                message = $"Docker - ({config["HOSTNAME"]})";    // LINHA ALTERADA
            }
            public IActionResult Index()
            {
                ViewBag.Message = message;              // ADICIONADO MSG e o REPOSITORIO na VIEW
                return View(repository.Produtos);       // LINHA ALTERADA
            }
        }
    }

12. Altere o código da classe /Views/Home/Index.cshtml pelo abaixo:

    @model IEnumerable<mvc1.Models.Produto>
    @{
        Layout = null;
    }
    <!DOCTYPE html>
    <html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title>App</title>
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    </head>
    <body>
        <div class="m-1 p-1">
            <h4 class="bg-primary text-xs-center p-1 text-white">@ViewBag.Message</h4>
            <table class="table table-sm table-striped">
                <thead>
                    <tr><th>ID</th><th>Nome</th><th>Categoria</th><th>Preco</th></tr>
                </thead>
                <tbody>
                    @foreach (var p in Model) {
                        <tr>
                            <td>@p.ProdutoId</td>
                            <td>@p.Nome</td>
                            <td>@p.Categoria</td>
                            <td>$@p.Preco.ToString("F2")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </body>
    </html>

13. Dentro da pasta Models insira a classe "Populadb" com o código abaixo:

    using System.Linq;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.Extensions.DependencyInjection;

    namespace mvc1.Models
    {
        public static class Populadb
        {
            public static void IncluiDadosDB(IApplicationBuilder app) 
            {
//                        IncluiDadosDB( app.ApplicationServices.GetRequiredService<AppDbContext>() );

                // https://riptutorial.com/asp-net-core/example/17400/using-scoped-services-during-application-startup---database-seeding
                using (var serviceScope = app.ApplicationServices.GetRequiredService<IServiceScopeFactory>().CreateScope())
                {
                    var db = serviceScope.ServiceProvider.GetService<AppDbContext>();

                    IncluiDadosDB( db );
                }

            }
            public static void IncluiDadosDB(AppDbContext context)
            {
                    System.Console.WriteLine("Aplicando Migrations...");
                    context.Database.Migrate();

                    if (!context.Produtos.Any()) 
                    {
                        System.Console.WriteLine("Criando dados...");
                        context.Produtos.AddRange(
                            new Produto("Luvas de goleiro", "Futebol", 25),
                            new Produto("Bola de basquete", "Basquete", 48.95m),
                            new Produto("Bola de Futebol", "Futebol", 19.50m),
                            new Produto("Óculos para natação", "Aquaticos", 34.95m),
                            new Produto("Meias Grandes", "Futebol", 50),
                            new Produto("Calção de banho", "Aquáticos", 16),
                            new Produto("Cesta para quadra", "Basquete", 29.95m)
                        );
                        context.SaveChanges();
                        } else {
                        System.Console.WriteLine("Dados já existem...");
                    }
            }
        }
    }

14. Acesse o arquivo "appsettings.Development.json" e insira a linha abaixo:

    // IMPORTANTE: Caso ocorra algum problema na identificação do servidor "mysql" como localhost, use o fisico do container.
    //              Utilize o comando "docker exec mysqldb hostname -I" para encontrar o IP do container
    //              ou
    //             Execute o comando:   docker container inspect mysqldb |grep -i "IPAddress\|Gateway"
    {
        ...,
        "ConnectionStrings": {
            "DotNetCoreMySQLAppConnection": "server=localhost; port=3306; database=productsdb; user=root; password=root; Persist Security Info=false; Connect Timeout=300;SSL Mode=None"
        },
    }


15. Acrescente essas linhas dentrao do método "ConfigureServices" da classe "Startup":

    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Hosting;
    using Microsoft.EntityFrameworkCore;                // Linha inserida
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Hosting;
    using mvc1.Models;                                  // Linha inserida

    namespace mvc1
    {
        public class Startup
        {
            public Startup(IConfiguration configuration)
            {
                Configuration = configuration;
            }

            public IConfiguration Configuration { get; }

            // This method gets called by the runtime. Use this method to add services to the container.
            public void ConfigureServices(IServiceCollection services)
            {
                services.AddControllersWithViews();

                string dbConnectionString = Configuration.GetConnectionString("DotNetCoreMySQLAppConnection");                                      // ADICIONADO
                services.AddDbContext<AppDbContext>(options => options.UseMySql(dbConnectionString, ServerVersion.AutoDetect(dbConnectionString))); // ADICIONADO

                // Linha inserida
                services.AddSingleton<IConfiguration>(Configuration);

                // Linha inserida
                services.AddTransient<IRepository, ProdutoRepository>();    // LINHA ALTERADA
            }

            // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
            {
                if (env.IsDevelopment())
                {
                    app.UseDeveloperExceptionPage();
                }
                else
                {
                    app.UseExceptionHandler("/Home/Error");
                    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                    app.UseHsts();
                }
                app.UseHttpsRedirection();
                app.UseStaticFiles();

                app.UseRouting();

                app.UseAuthorization();

                app.UseEndpoints(endpoints =>
                {
                    endpoints.MapControllerRoute(
                        name: "default",
                        pattern: "{controller=Home}/{action=Index}/{id?}");
                });

                // Linha inserida
                Populadb.IncluiDadosDB(app);    

            }
        }
    }

16. Levante o container do MySQL:

    docker run -d --name mysqldb -e MYSQL_ROOT_PASSWORD=root -p 3306:3306  mysql:5.7 

16. Acesse a linha de comandos na pasta raiz da solution e digito o comando abaixo:

    cd src/mvc1

    # Caso não encontre o "dotnet ef" instale com o comando "dotnet tool install --global dotnet-ef"
    dotnet ef migrations add Inicial

    # Verifique no MySQL se o "database" e as "Table" foi contruído com sucesso.
    dotnet ef database update --context AppDbContext

17. Executando o projeto:

    dotnet clean
    dotnet restore
    dotnet build
    dotnet run

18. Execute a URL abaixo no navegador

    https://localhost:5001



Trabalhando com volumes
-----------------------

1. Limpando o ambiente

    docker container rm -f $(docker ps -aq)

    docker volume prune

    docker image rm $(docker images -a -q)

2. Recriando o ambiente:

    docker volume create --name produtosdata

    docker run -d --name mysqldb -v produtosdata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306  mysql:5.7 

    dotnet ef database update --context AppDbContext

    # Ao executar o comando abaixo, entraremos na linha de comando do container. Digite o comando abaixo:
    #
    #   mysql -u root -p
    #
    # Informe a senha "root"
    #
    #
    #   create database desenv;
    #   use desenv;
    #   create table Produtos( id int, name varchar(30));
    #   select * from Produtos;
    #
    docker exec mysqldb bash     

    ou 

    docker exec -it mysqldb mysql -u root -p

    ou 

    docker exec mysqldb hostname -I

    mysql -u root -p -h <IP do container acima>


3. Apagar o container do mysql e criar outro container mysql apontando para o volume criado no passo 2. Ao final
    se tudo der certo os dados criados inicialmente sobrevirá a eliminação do container, pois eles foram guardados
    no volume.

    docker container rm -f mysqldb

    docker run -d --name mysqldb -v produtosdata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306  mysql:5.7 

    # Ao executar o comando abaixo, entraremos na linha de comando do container. Digite o comando abaixo:
    #
    #   mysql -u root -p
    #
    # Informe a senha "root"
    #
    #   use desenv;
    #   select * from Produtos;
    #
    docker container exec -it mysql bash

4. Podemos substituir um volume por uma pasta fisica ao criar o container

    #docker container run -d --name mysql -v /home/marco/mysql-docker:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e bind-address=0.0.0.0 mysql:5.7
    docker run -d --name mysqldb -v produtosdata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306  mysql:5.7 



Trabalhando com Dockerfile com imagens
------------------------------------

1. Limpando o ambiente

    docker container rm -f $(docker ps -aq)

    docker image rm $(docker images -a -q)
    
    docker volume prune

3. Criar um arquivo "Dockerfile" com conteúdo abaixo na pasta raiz do projeto "./src/mvc1"

https://collabnix.com/getting-started-with-docker-multi-stage-builds/
https://hovermind.com/kubernetes/understanding-dockerfile.html
https://www.cherryservers.com/blog/docker-multistage-build
https://www.youtube.com/watch?v=vIfS9bZVBaw
https://www.youtube.com/watch?v=zP4lInIwfXg


    FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base
    LABEL version="1.0.1" description="Aplicação ASP.NET Core MVC"
    WORKDIR /app
    EXPOSE 5000
    ENV ASPNETCORE_URLS=http://*:5000
    ENV ASPNETCORE_ENVIRONMENT=Development      # ATENÇÃO: Essa variável que apontará para o arquivo "appsettings.Development.json"

    # Procedimentos abaixo opcional, caso queira instalar o my-client para conectar o container do "mysql" de dentro do container da aplicação.
    # RUN apt-get update && apt-get install -y sudo
    # RUN apt install mysql-client 
    # RUN apt install iputils-ping -y

    FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build
    WORKDIR /src
    COPY ["mvc1.csproj", "."]
    RUN dotnet restore "./mvc1.csproj"
    COPY . .
    WORKDIR "/src/."
    RUN dotnet build "./mvc1.csproj" -c Release -o /app/build

    FROM build AS publish
    RUN dotnet publish "./mvc1.csproj" -c Release -o /app/publish

    FROM base AS final
    WORKDIR /app
    COPY --from=publish /app/publish .
    ENTRYPOINT ["dotnet", "mvc1.dll"]

6. Crie o container do mysql:





#   Testar a geração do container do MySQL na rede Host e tentar usa-lo não pelo endereço IP, mas pelo localhost




    docker run -d --name mysqldb -v produtosdata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306  mysql:5.7 
    
    # Ao executar o comando abaixo, entraremos na linha de comando do container. Digite o comando abaixo:
    #
    #   mysql -u root -p
    #
    # Informe a senha "root"
    #
    #       create database desenv;
    #
    docker container exec -it mysql bash

7. Altere o endereço IP do "server" dentro do arquivo "appsettings.Development.json"

    docker inspect mysqldb| grep -i IpAddress

            "SecondaryIPAddresses": null,
            "IPAddress": "172.17.0.2",
                    "IPAddress": "172.17.0.2", -----+
                                                    |
    #appsettings.Development.json                   V
    "DotNetCoreMySQLAppConnection": "server=172.17.0.2; port=3306; database=productsdb; user=root; password=root; Persist Security Info=false; Connect Timeout=300;SSL Mode=None"

4. Execute o comando abaixo na pasta raiz do projeto "./src/mvc1"

    cd src/mvc1

    docker build -t aspnetcoremvc/app:1.0 .

    docker images

    docker container create -p 5000:5000 --name mvcprodutos aspnetcoremvc/app:1.0 

    docker container ps -a

    docker container start mvcprodutos

8. Acesse o navegador e execute a URL abaixo:

    http://localhost:5000



Trabalhando com Docker Compose
------------------------------

2. Crie o arquivo "docker-compose.yml" com o conteúdo abaixo:

    version: '3.4'
    services:

    database:
        image: mysql:5.7
        container_name: mysqldb
        ports:
        - 3306:3306
        expose: 
        - 3306
        restart: always
        environment: 
        MYSQL_ROOT_PASSWORD: root
        MYSQL_USER: marco
        MYSQL_PASSWORD: brasil2
        MYSQL_DATABASE: productsdb
        volumes:
        - db-volume:/var/lib/mysql
    #      - ./_MySQL_Init_Script/init.sql:/docker-entrypoint-initdb.d/init.sql
    #      - ./MySQLConf/my.cnf:/etc/my.cnf

    mvcdocker:
        image: ${DOCKER_REGISTRY-}mvcdocker
        container_name: mvcdocker
        build:
        context: ./src/mvc1/
        dockerfile: Dockerfile
        depends_on: 
        - database
        ports:
        - "5000:5000"
        restart: always
        environment: 
        - ASPNETCORE_ENVIRONMENT=Development
    #      - DB_HOST=database

    volumes:
    db-volume:

3. Altere  o parâmetro server da string de conexão no "appsettings.Development" pelo nome do serviço do banco do "docker-compose":

  "ConnectionStrings": {
                            "DotNetCoreMySQLAppConnection": "server=database; port=3306; database=productsdb; user=root; password=root; Persist Security Info=false; Connect Timeout=300;SSL Mode=None"
                        }                                               ^
                                                                        |
                                                                       Aqui
4. Execute os comandos abaixo:

    # Comando para apagar todos os container referenciado pelo arquivo docker-compose acima
    docker compose down -v

    # Constroi uma image baseada nas configurações do arquivo docker-compose
    docker compose build

    # Levanta os containeres construidos pelo build
    docker compose up -d

5. Aguarde uns 10 segundos para o container "mvcdocker" levantar. Devido ao container do banco mysql demorar para se auto levantar, o container "mvcdocker" tenta umas três
    vezes levantar. Ao termino desse tempo, podemos seguir para o próximo passo. 

5. Acesse o link abaixo no navegador

    http://localhost:5000





# PAREI AQUI
https://www.youtube.com/watch?v=PyQxzZrdGHk     25:20

Trabalhando com redes ( Trabalhando com dois containeres "appmvc" e "mysql" sem o docker compose)
----------------------------------------------------------------------------

1. Acesse a pasta raiz do projeto mvc

    cd src/mvc1


1. Crie uma rede bridge com o comando abaixo:

    docker network rm net-mysql

    docker network create -d bridge net-mysql 

2. Crie o container mysql:

    docker container rm -f mysqldb

    docker container run -d --name mysqldb -v produtosdata:/var/lib/mysql --network net-mysql -e MYSQL_ROOT_PASSWORD=root  mysql:5.7 
                                    |
                                    +---------------------------------------------------------------------------+
                                                                                                                |
                                                                                                                V
3. Altere  o parâmetro server da string de conexão no "appsettings.Development" pelo nome do serviço do banco "mysqldb"

  "ConnectionStrings": {
                            "DotNetCoreMySQLAppConnection": "server=mysqldb; port=3306; database=productsdb; user=root; password=root; Persist Security Info=false; Connect Timeout=300;SSL Mode=None"
                        }                                               ^
                                                                        |
                                                                       Aqui
4. Reconstrua o container da aplicação:

    docker build -t aspnetcoremvc/app:1.0 .

    docker container create -p 5000:5000 --name mvcprodutos --network net-mysql aspnetcoremvc/app:1.0 

    docker container start mvcprodutos

5. Execute o projeto:

    http://localhost:5000
