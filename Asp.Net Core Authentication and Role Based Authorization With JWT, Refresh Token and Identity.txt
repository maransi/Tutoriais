Asp.Net Core Authentication and Role Based Authorization With JWT, Refresh Token and Identity
---------------------------------------------------------------------------------------------

1. Video tutorial

    https://www.youtube.com/watch?v=EnHrfJO0gyE&list=PL7yxJa4Na-ir9DLuPL_8kYhyHJXCoPyaR

    . Os fontes do projeto desenvolvido estão na URL abaixo:

        https://github.com/rd003/DotnetApiCompleteAuth

2. Enviroment

    . Instalação para as versões acima do Ubuntu 22.04

        wget https://dot.net/v1/dotnet-install.sh
        chmod +x dotnet-install.sh

        export DOTNET_INSTALL_DIR=$HOME/.dotnet 
        
        ./dotnet-install.sh --install-dir /home/marco/.dotnet -c 3.1
        ./dotnet-install.sh -c 5.0
        ./dotnet-install.sh -c 6.0
        ./dotnet-install.sh -c 7.0

        dotnet --version

        # insira as linhas abaixo no arquivo ".bashrc"
        export PATH="home/$USER/.dotnet:/home/$USER/.dotnet/tools:$PATH"
        export DOTNET_ROOT=/home/$USER/.dotnet/

        source ~/.bashrc

        sudo ln -s /home/$USER/.dotnet/dotnet /usr/bin/dotnet

        dotnet --version
        dotnet --list-runtimes
        dotnet --list-sdks

    . Instalação das extensões do VSCode

            C# 
            C# Extensions (JosKreativ)
            C# XML Documentation Comments
            C# Snippets
            Docker
            RapidAPI client      // Rest API
            SQLTools
            SQLTools MySQL/MariaDB/...


    . Instalação do Nodejs

        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | $SHELL

        echo 'export PATH="/home/$USER/.nvm:$PATH"' >> ~/.bashrc
        echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.bashrc 

        nvm --version

        # Para instalar a versão lts mais recente
        nvm install --lts

        # Se quiser instalar uma versão especifica, utilize:
        # nvm install 18.20.4

        # Se quiser listar as versões do node disponivel no repositorio remoto
        # nvm ls-remote

        # Se quiser listar as versões instalada na máquina atual
        # nvm ls

        # Para usar uma versão instalada na máquina atual
        # nvm use 20.17.0

        # Para desinstalar uma versão do node js
        # nvm uninstall 18.20.4

        node -v
        npm -v

    . Instalação do Git

        sudo apt-get install git
        git --version
        git config --global user.name "maransi"
        git config --global user.email "maransi"
        git config --list

        . Importante: Verifique como trabalhar com "Branchs" no curso "Resumo do Curso Git", principalmente na parte 
                        "6. Trabalhando com "Branchs"


    . Instalação do Docker

        # Acesse o paragrafo "Install Docker Desktop" e execute o passo a passo

        # Ubuntu
        https://docs.docker.com/desktop/setup/install/linux/ubuntu/

            . Instalação de 05/2025

                sudo apt-get update
                sudo apt-get install ca-certificates curl
                sudo install -m 0755 -d /etc/apt/keyrings
                sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
                sudo chmod a+r /etc/apt/keyrings/docker.asc

                echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

                sudo apt-get update
                sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
                docker --version

                sudo groupadd docker
                sudo gpasswd -a $USER docker
                sudo chown "$USER":"$USER" /var/run/docker.sock -R
                docker --version
                docker ps -a

                sudo docker run hello-world

        # Debian
        https://docs.docker.com/desktop/setup/install/linux/debian/

    . Create Docker Container for Database MySQL

        . Instalação do MySQL:

            sudo apt update && sudo apt upgrade -y  

            sudo apt install libaio1

            cd ~/Downloads

            sudo wget https://dev.mysql.com/get/mysql-apt-config_0.8.29-1_all.deb
            
            # Na janela gráfica deixe as opções marcadas ou escolha se você souber o que está fazendo > enter > enter > tab > OK > enter.
            sudo dpkg -i mysql-apt-config_0.8.29-1_all.deb
            
            # Na janela gráfica deixe as opções marcadas ou escolha se você souber o que está fazendo > enter > enter > tab > OK > enter.
            sudo dpkg-reconfigure mysql-apt-config

            # File '/usr/share/keyrings/mysql-apt-config.gpg' exists. Overwrite? (y/N) y
            
            sudo dpkg -i mysql-apt-config_0.8.29-1_all.deb
            
            sudo dpkg-reconfigure mysql-apt-config
            
            sudo apt update
            
            sudo apt install mysql-server
            
            mysql -u root -p 
            
        . Instalação do container do MySQL

            docker pull mysql
            docker images

            . Executando o container MySQL criado:
            
                . Executando o Container do MySQL no localhost numa porta diferente 3003:

                    docker run -e MYSQL_ROOT_PASSWORD=root --name dotnetdb -d -p 3003:3306 mysql:8.0
                    docker start dotnetdb
                    docker ps
                    
                    mysql -u root -p -h 127.0.0.1 -P 3003	
                    ou 
                    mysql -uroot -proot -h172.17.0.2

                    docker stop c342845054d1 		
                    ou 	
                    docker stop dotnetdb


3. Creating a new project


    . Digite os comandos abaixo na pasta de projetos:

        dotnet new sln -o DotnetApiCompleteAuth

        cd DonetApiCompleteAuth

        dotnet new webapi --use-controllers -n DotnetApiCompleteAuth -o ./src/DotnetApiCompleteAuth --no-openapi -f net8.0 
        # dotnet new webapi --use-controllers -n DotnetApiCompleteAuth -o ./src/DotnetApiCompleteAuth  -f net8.0

        dotnet sln add ./src/DotnetApiCompleteAuth/DotnetApiCompleteAuth.csproj

        git init

        dotnet new gitignore --force

    . Acesse a pasta da solution com o VSCode

    . Apague o controller "./Controllers/WeatherForecastController.cs" e a classe "./WeatherForecast.cs"

    . Acesse o prompt do terminal e a pasta raiz da "solution" e execute o comando abaixo:

        dotnet clean

        dotnet build

        git add .

        git commit -am "feat: first commit"

4. Creating the PeopleController

    . Podemos criar um controller com o "dotnet cli"

    . Precisamos ter o pacote "Microsoft.VisualStudio.Web.CodeGeneration.Design" instalado no seu projeto de API para usar esse comando. 
        Se você não tiver esse pacote instalado, você pode instalá-lo usando o comando:

        cd src/DotnetApiCompleteAuth

        dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design --version 8.0.7

        dotnet tool install -g dotnet-aspnet-codegenerator --version 9.0.0

    . Sintaxe


        dotnet aspnet-codegenerator controller -name NomeDoController -async -api -m NomeDoModelo -dc NomeDoDbContext -outDir Controllers

        . Este comando cria um novo controller com o nome especificado, com suporte a async/await, API e usando o modelo e contexto de dados especificados.

        . Aqui está uma explicação dos parâmetros:

            -name: especifica o nome do controller.
            -async: especifica que o controller deve ser criado com suporte a async/await.
            -api: especifica que o controller deve ser criado como um controller API.
            -m: especifica o nome do modelo que o controller deve usar.
            -dc: especifica o nome do contexto de dados que o controller deve usar.
            -outDir: especifica o diretório onde o controller deve ser criado.

    . Exemplo

        dotnet aspnet-codegenerator controller -name ProdutosController -async -api -m Produto -dc MeuDbContext -outDir Controllers  

        # dotnet aspnet-codegenerator controller -name PeopleController -async -api -outDir Controllers

    . Crie a classe "PeopleController.cs" dentro da pasta "Controllers" com o conteúdo abaixo, ou execute o comando "dotnet cli" acima:

        using Microsoft.AspNetCore.Http;
        using Microsoft.AspNetCore.Mvc;
        using Microsoft.AspNetCore.Authorization;

        namespace DotnetApiCompleteAuth.Controllers;

        [Route("api/[controller]")]
        [ApiController]
        public class PeopleController : ControllerBase
        {
            [HttpGet]
            [AllowAnonymous]
            public IActionResult GetPeople()
            {
                return Ok("People data");
            }

            [HttpPost]
            public IActionResult CreatePerson()
            {
                return Ok("Person is created");
            }
        }

    . Acesse a classe "Program.cs" e insira as linhas abaixo:

        using AspNetCore.Scalar;

        var builder = WebApplication.CreateBuilder(args);

        builder.Services.AddControllers();

        // Linha Inserida
        builder.Services.Configure<RouteOptions>(options =>
        {
            options.LowercaseUrls = true; // Força URLs em minúsculas
        });

        ...

    . Executando o projeto pela solution:

        dotnet clean

        dotnet restore

        dotnet build

        dotnet run --project DotnetApiCompleteAuth/ 

    . Executando o projeto diretamente pelo projeto:

        cd DotnetApiCompleteAuth

        dotnet clean

        dotnet restore

        dotnet build

        dotnet run

        # Caso ocorra alguma msg de warning (   Warning: Locale 'ru' does not match any known cultures.
        #                                       Warning: Failed to read or parse localization file .... )
        # Execute o comando abaixo:
        #
        # chmod -R u+r /home/marco/.dotnet/templates/ 
        #
        # e atualize o ".csproj" com a linha abaixo
        #
        #    <Project Sdk="Microsoft.NET.Sdk.Web">
        #
        #       <PropertyGroup>
        #           <TargetFramework>net8.0</TargetFramework>
        #           <Nullable>enable</Nullable>
        #           <ImplicitUsings>enable</ImplicitUsings>
        #
        #           <!-- Insira a linha abaixo -->
        #           <NoWarn>$(NoWarn);NETSDK1188</NoWarn>
        #       </PropertyGroup>
        #
        #   </Project>

    . Configurando o swagger

        . Acesse o terminal e execute o comando abaixo:

            cd src/DotnetApiCompleteAuth

            dotnet add package Swashbuckle.AspNetCore --version 8.1.1

        . Acesse a classe "Program.cs" e insira as linhas abaixo:

            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.

            builder.Services.AddControllers();

            builder.Services.AddEndpointsApiExplorer();         // linha inserida
            builder.Services.AddSwaggerGen();                   // Linha inserida


            var app = builder.Build();

            // Bloco inserido
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();                               // Linha inserida
                app.UseSwaggerUI();                             // Linha inserida
            }


            app.UseHttpsRedirection();

            app.UseAuthorization();

            app.MapControllers();

            app.Run();

        . Levante o projeto e execute a URL abaixo no navegador:

            http://localhost:[porta]/swagger/index.html

    . Configurando o Scalar:

        . Caso queira adaptar o Scalar para a versão do .net9.0 em diante verifique os links abaixo:

            # A partir 20:40
            https://www.youtube.com/watch?v=Tx49o-5tkis&list=PL7yxJa4Na-ir9DLuPL_8kYhyHJXCoPyaR&index=4

            https://guides.scalar.com/scalar/scalar-api-references/net-integration

            https://medium.com/@encinecarlos/documentando-apis-net-com-scalar-2025bda7f39a

            https://carloscds.net/2024/06/aspnetcore-swagger-scalar/

        . Acesse o terminal e execute o comando abaixo na pasta raiz do projeto API:

            dotnet add package AspNetCore.Scalar --version 1.1.1

        . Acesse a classe "Program.cs" e insira as linhas abaixo:

            using AspNetCore.Scalar;                                    // Linha inserida

            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.

            builder.Services.AddControllers();

            builder.Services.AddEndpointsApiExplorer();         
            builder.Services.AddSwaggerGen();                   


            var app = builder.Build();

            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();                               
                app.UseSwaggerUI();   
            }

            // Bloco Inserido
            app.UseScalar(options =>
            {
                options.UseTheme(Theme.BluePlanet);
                options.UseLayout(Layout.Classic);

                options.RoutePrefix = "api-docs";

                options.DocumentTitle = "Documentação das APIs";
            });

            app.UseHttpsRedirection();

            app.UseAuthorization();

            app.MapControllers();

            app.Run();

        . Levante o projeto e execute a URL abaixo no navegador:

            http://localhost:[porta]/api-docs

    . Acesse o Postman e execute as APIs com os parâmetros abaixo:

        method: GET
        url: http://localhost:[porta]/api/people

        method: POST
        url: http://localhost:[porta]/api/people

    . Acesse a URL abaixo e execute as APIs do projeto:

        http://localhost:[porta]/api-docs    

    . Atualize a branch master

        cd ~/workspace/dotnet/DotnetApiCompleteAuth

        git add .

        git commit -am "4. Creating the PeopleController"


5. Adding required Nuget Package

    . Crie a branch "5. Adding required Nuget Package"

        cd ~/workspace/dotnet/DotnetApiCompleteAuth

        git branch 5.AddingRequiredNugetPackage 

    . Na pasta raiz do projeto "webapi" execute os comandos abaixo:

        cd src/DotnetApiCompleteAuth

        dotnet add package Microsoft.EntityFrameworkCore --version 8.0.15

        dotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.15

        dotnet add package Microsoft.EntityFrameworkCore.Design --version 8.0.15

        dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version 8.0.15

        dotnet add package Pomelo.EntityFrameworkCore.MySql --version 8.0.3

        dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 8.0.15

        # Execute a linha abaixo caso o "dotnet-ef" não existir no ambiente
        dotnet tool install --global dotnet-ef --version 8.0.15

    . Atualize a branch master

        cd ~/workspace/dotnet/DotnetApiCompleteAuth

        git add .

        git commit -am "5. Adding required Nuget Package"


6. ConnectionString and Application User

    . Crie a branch "6.ConnectionStringAandApplicationUser"

        cd ~/workspace/dotnet/DotnetApiCompleteAuth

        git branch 6.ConnectionStringAndApplicationUser


    . Verificar detalhes sobre o arquivo "AppSettings.[Development].json" na 
        "Aula 71. Configurações de Debug" do curso "Fundamentos ASP.NET 6 - Balta"

    . Acesse o arquivo "appsettings.Development.json" e insira as linhas abaixo?

        {
            "Logging": {
                "LogLevel": {
                "Default": "Information",
                "Microsoft.AspNetCore": "Warning"
                }
            },
            "ConnectionStrings": {
                "default": "server=localhost; port=3003; database=dotnetdb; uid=root; pwd=root; Persist Security Info=false; Connect Timeout=300;SSL Mode=None; AllowPublicKeyRetrieval=True;"

            }
        }


    . Crie a pasta "Models" e dentro dela a classe "ApplicationUser" como abaixo:


        using Microsoft.AspNetCore.Identity;

        namespace DotnetApiCompleteAuth.Models;

        public class ApplicationUser : IdentityUser
        {
            public string Name { get; set; } = string.Empty;
        }

    . Atualize a branch master

        cd ~/workspace/dotnet/DotnetApiCompleteAuth

        git add .

        git commit -am "6. ConnectionString and Application User"

7. AppDbContext and Sending Data

    . Crie a branch "7.AppDbContextAndSendingData"

        cd ~/workspace/dotnet/DotnetApiCompleteAuth

        git branch 7.AppDbContextAndSendingData

    . Crie a classe "AppDbContext" dentro da pasta "Models" com o conteúdo abaixo:

        using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
        using Microsoft.EntityFrameworkCore;

        namespace DotnetApiCompleteAuth.Models;

        public class AppDbContext : IdentityDbContext<ApplicationUser>
        {
            public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
            {

            }

        }

    . Acesse a classe "Programs.cs" e insira as linhas abaixo:

        using AspNetCore.Scalar;
        using DotnetApiCompleteAuth.Models;     // linha inserida
        using Microsoft.AspNetCore.Identity;    // linha inserida
        using Microsoft.EntityFrameworkCore;    // linha inserida

        ...
        builder.Services.AddControllers();

        // linha inserida
        string connectionString = builder.Configuration.GetConnectionString("default");

        // linha inserida
        builder.Services.AddDbContext<AppDbContext>(options =>
            options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString)));

        // linha inserida
        builder.Services.AddIdentity<ApplicationUser, IdentityRole>()
                        .AddEntityFrameworkStores<AppDbContext>()
                        .AddDefaultTokenProviders();

    . Crie a pasta "Constants" na pasta raiz do projeto API e crie a classe "Roles" com o conteúdo abaixo:

        namespace DotnetApiCompleteAuth.Constants;

        public static class Roles
        {
            public const string Admin = "Admin";
            public const string User = "User";
        }

    . Atualize a branch master

        cd ~/workspace/dotnet/DotnetApiCompleteAuth

        git add .

        git commit -am "7. AppDbContext and Sending Data"

8. Creating An Admin Account

    . Crie a branch "8.CreatingAnAdminAccount"

        cd ~/workspace/dotnet/DotnetApiCompleteAuth

        git branch 8.CreatingAnAdminAccount


    . Crie a pasta "Data" e dentro dela a classe "DbSeeder" com o conteúdo abaixo:


        using DotnetApiCompleteAuth.Constants;
        using DotnetApiCompleteAuth.Models;
        using Microsoft.AspNetCore.Identity;
        using Microsoft.EntityFrameworkCore;

        namespace DotnetApiCompleteAuth.Data;

        public class DbSeeder
        {
            public static async Task SeedDataAsync(IApplicationBuilder app)
            {
                // Normalmente utilizamos injeção de dependência para criar os objetos
                // Porém, utilizaremos o objeto "scope" para essa finalidade
                using var scope = app.ApplicationServices.CreateScope();

                // Applying the pending migration (Not reccomended for prduction)
                var dbContext = scope.ServiceProvider.GetRequiredService<AppDbContext>();

                if ((await dbContext.Database.GetPendingMigrationsAsync()).Count() > 0)
                {
                    await dbContext.Database.MigrateAsync();
                }

                var logger = scope.ServiceProvider.GetRequiredService<ILogger<DbSeeder>>();

                try
                {
                    var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

                    var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();

                    // check if any user exists
                    if (!userManager.Users.Any())
                    {
                        // We will create a default user with role=Admin
                        var user = new ApplicationUser
                        {
                            Name = "Admin",
                            UserName = "admin@example.com",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            SecurityStamp = Guid.NewGuid().ToString()
                        };

                        // create an Admin role if does not exists

                        if (!await roleManager.RoleExistsAsync(Roles.Admin))
                        {
                            var roleResult = await roleManager.CreateAsync(new IdentityRole(Roles.Admin));

                            if (roleResult.Succeeded == false)
                            {
                                var roleErrors = roleResult.Errors.Select(e => e.Description);
                                logger.LogError($"Failed to create admin role. Errors : {string.Join(",", roleErrors)}");
                                return;
                            }
                            logger.LogInformation("Admin role is created");
                        }

                        // Attempt to create admin user
                        var createUserResult = await userManager
                            .CreateAsync(user: user, password: "Admin@123");

                        // Validate user creation
                        if (createUserResult.Succeeded == false)
                        {
                            var errors = createUserResult.Errors.Select(e => e.Description);
                            logger.LogError(
                                $"Failed to create admin user. Errors: {string.Join(", ", errors)}"
                            );
                            return;
                        }

                        // adding role to user
                        var addUserToRoleResult = await userManager
                                        .AddToRoleAsync(user: user, role: Roles.Admin);

                        if (addUserToRoleResult.Succeeded == false)
                        {
                            var errors = addUserToRoleResult.Errors.Select(e => e.Description);
                            logger.LogError($"Failed to add admin role to user. Errors : {string.Join(",", errors)}");
                        }
                        logger.LogInformation("Admin user is created");
                    }

                }
                catch (Exception ex)
                {
                    logger.LogError(ex.Message);
                }
            }
        }

    . Altere a classe "Program.cs" com o conteúdo abaixo:

        using DotnetApiCompleteAuth.Data;       // Linha inserida

        ...
        app.UseHttpsRedirection();

        app.UseAuthorization();

        app.MapControllers();

        // Linha inserida
        await DbSeeder.SeedDataAsync(app);

        app.Run();

    . Acesse o prompt e execute o comando abaixo na pasta do projeto de APIs
 

        cd src/DotnetApiCompleteAuth

        # ATENÇÃO: Verifique se o container DOCKER do MySQL está levantado
        dotnet ef migrations add InitialCreate

        dotnet ef database update --context AppDbContext

    . Acesse a pasta "Migrations" e verifique se foi criado os arquivos de migração.

    . Levante o container do MySQL e execute o projeto de APIs com o comando abaixo:

        dotnet run

    . Acesse o MySQL e veja se foi criado o database do projeto com as tabelas 
        de controle de autorização devidamente populadas.

    . Atualize a branch master

        cd ~/workspace/dotnet/DotnetApiCompleteAuth

        git add .

        git commit -am "8. Creating An Admin Account"


9. Signup

    . Crie a branch "9.Signup"

        cd ~/workspace/dotnet/DotnetApiCompleteAuth

        git branch 9.Signup

    . Crie a classe "SignupModel" na pasta "Model" com o conteúdo abaixo:

        using System.ComponentModel.DataAnnotations;

        namespace DotnetApiCompleteAuth.Models;

        public class SignupModel
        {
            [Required]
            [MaxLength(30)]
            public string Name { get; set; } = string.Empty;

            [Required]
            [MaxLength(30)]
            [EmailAddress]
            public string Email { get; set; } = string.Empty;

            [Required]
            [MaxLength(30)]
            public string Password { get; set; } = string.Empty;

        }


    . Crie a classe "AccountController" dentro da pasta "Controllers" com o conteúdo abaixo:

        using Microsoft.AspNetCore.Identity;
        using DotnetApiCompleteAuth.Models;
        using Microsoft.AspNetCore.Mvc;

        namespace DotnetApiCompleteAuth.Controllers
        {
            [Route("api/[controller]")]
            [ApiController]
            public class AccountsController : ControllerBase
            {
                private readonly UserManager<ApplicationUser> _userManager;
                private readonly RoleManager<IdentityRole> _roleManager;
                private readonly ILogger<AccountsController> _logger;


            }

            public AccountsController(UserManager<ApplicationUser> userManager, RoleManager<IdentityRole> roleManager, ILogger<AccountsController> logger)
            {
                _userManager = userManager;
                _roleManager = roleManager;
                _logger = logger;
            }

            [HttpPost("signup")]
            public async Task<IActionResult> Signup(SignupModel model)
            {
                try
                {
                    var existingUser = await _userManager.FindByNameAsync(model.Email);

                    if (existingUser != null)
                    {
                        return BadRequest("User already exists");
                    }

                    // Create User role if it doesn't exist
                    if ((await _roleManager.RoleExistsAsync(Roles.User)) == false)
                    {
                        var roleResult = await _roleManager
                            .CreateAsync(new IdentityRole(Roles.User));

                        if (roleResult.Succeeded == false)
                        {
                            var roleErros = roleResult.Errors.Select(e => e.Description);
                            _logger.LogError($"Failed to create user role. Errors : {string.Join(",", roleErros)}");
                            return BadRequest($"Failed to create user role. Errors : {string.Join(",", roleErros)}");
                        }
                    }

                    ApplicationUser user = new()
                    {
                        Email = model.Email,
                        SecurityStamp = Guid.NewGuid().ToString(),
                        UserName = model.Email,
                        Name = model.Name,
                        EmailConfirmed = true
                    };

                    // Attempt to create a user
                    var createUserResult = await _userManager.CreateAsync(user, model.Password);

                    // Validate user creation. If user is not created, log the error and
                    // return the BadRequest along with the errors
                    if (createUserResult.Succeeded == false)
                    {
                        var errors = createUserResult.Errors.Select(e => e.Description);
                        _logger.LogError(
                            $"Failed to create user. Errors: {string.Join(", ", errors)}"
                        );
                        return BadRequest($"Failed to create user. Errors: {string.Join(", ", errors)}");
                    }                    

                    // adding role to user
                    var addUserToRoleResult = await _userManager.AddToRoleAsync(user: user, role: Roles.User);

                    if (addUserToRoleResult.Succeeded == false)
                    {
                        var errors = addUserToRoleResult.Errors.Select(e => e.Description);
                        _logger.LogError($"Failed to add role to the user. Errors : {string.Join(",", errors)}");
                        return BadRequest($"Failed to create user Role. Errors: {string.Join(", ", errors)}");
                    }

                    return CreatedAtAction(nameof(Signup), null);

                }
                catch (Exception ex)
                {
                    return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
                }
            }
        }

    . Levante o projeto:

        dotnet run

    . Acesse o Postman e execute a API abaixo:

        URL: http://localhost:[port]/api/accounts/signup
        Method: POST
        Body:   
            raw: JSON,
            {
            "name": "John Doe",
            "email": "john@example.com",
            "password": "John@123"

        }

    . Atualize a branch master

        cd ~/workspace/dotnet/DotnetApiCompleteAuth

        git add .

        git commit -am "9. Signup"

10. Login


31.09