Asp.Net Core Authentication and Role Based Authorization With JWT, Refresh Token and Identity
---------------------------------------------------------------------------------------------

1. Video tutorial

    https://www.youtube.com/watch?v=EnHrfJO0gyE&list=PL7yxJa4Na-ir9DLuPL_8kYhyHJXCoPyaR

    . Os fontes do projeto desenvolvido estão na URL abaixo:

        https://github.com/rd003/DotnetApiCompleteAuth

2. Enviroment

    . Instalação para as versões acima do Ubuntu 22.04

        wget https://dot.net/v1/dotnet-install.sh
        chmod +x dotnet-install.sh
        ./dotnet-install.sh -c 3.1
        ./dotnet-install.sh -c 5.0
        ./dotnet-install.sh -c 6.0
        ./dotnet-install.sh -c 7.0

        dotnet --version

        # insira as linhas abaixo no arquivo ".bashrc"
        export PATH="home/$USER/.dotnet:/home/$USER/.dotnet/tools:$PATH"
        export DOTNET_ROOT=/home/$USER/.dotnet/

        source ~/.bashrc

        sudo ln -s /home/$USER/.dotnet/dotnet /usr/bin/dotnet

        dotnet --version
        dotnet --list-runtimes
        dotnet --list-sdks

    . Instalação das extensões do VSCode

            C# 
            C# Extensions (JosKreativ)
            C# XML Documentation Comments
            C# Snippets
            Docker
            RapidAPI client      // Rest API

    . Instalação do Nodejs

        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | $SHELL

        echo 'export PATH="/home/$USER/.nvm:$PATH"' >> ~/.bashrc
        echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.bashrc 

        nvm --version

        # Para instalar a versão lts mais recente
        nvm install --lts

        # Se quiser instalar uma versão especifica, utilize:
        # nvm install 18.20.4

        # Se quiser listar as versões do node disponivel no repositorio remoto
        # nvm ls-remote

        # Se quiser listar as versões instalada na máquina atual
        # nvm ls

        # Para usar uma versão instalada na máquina atual
        # nvm use 20.17.0

        # Para desinstalar uma versão do node js
        # nvm uninstall 18.20.4

        node -v
        npm -v

    . Instalação do Git

        sudo apt-get install git
        git --version
        git config --global user.name "maransi"
        git config --global user.email "maransi"
        git config --list

    . Instalação do Docker

        # Acesse o paragrafo "Install Docker Desktop" e execute o passo a passo

        # Ubuntu
        https://docs.docker.com/desktop/setup/install/linux/ubuntu/

            . Instalação de 05/2025

                sudo apt-get update
                sudo apt-get install ca-certificates curl
                sudo install -m 0755 -d /etc/apt/keyrings
                sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
                sudo chmod a+r /etc/apt/keyrings/docker.asc

                echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

                sudo apt-get update
                sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
                docker --version

                sudo groupadd docker
                sudo gpasswd -a $USER docker
                sudo chown "$USER":"$USER" /var/run/docker.sock -R
                docker --version
                docker ps -a

                sudo docker run hello-world

        # Debian
        https://docs.docker.com/desktop/setup/install/linux/debian/

3. Creating a new project


    . Digite os comandos abaixo na pasta de projetos:

        dotnet new sln -o DotnetApiCompleteAuth

        cd DonetApiCompleteAuth

        dotnet new webapi --use-controllers -n DotnetApiCompleteAuth -o DotnetApiCompleteAuth --no-openapi -f net8.0 
        # dotnet new webapi --use-controllers -n DotnetApiCompleteAuth -o ./src/DotnetApiCompleteAuth  -f net8.0

        dotnet sln add ./src/DotnetApiCompleteAuth/DotnetApiCompleteAuth.csproj

        git init

        dotnet new gitignore

    . Acesse a pasta da solution com o VSCode

    . Apague o controller "./Controllers/WeatherForecastController.cs" e a classe "./WeatherForecast.cs"

    . Acesse o prompt do terminal e a pasta raiz da "solution" e execute o comando abaixo:

        dotnet clean

        dotnet build

        git add .

        git commit -am "feat: first commit"

4. Creating the PeopleController

    . Podemos criar um controller com o "dotnet cli"

    . Precisamos ter o pacote "Microsoft.VisualStudio.Web.CodeGeneration.Design" instalado no seu projeto para usar esse comando. 
        Se você não tiver esse pacote instalado, você pode instalá-lo usando o comando:

        dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design --version 8.0.7

        dotnet tool install -g dotnet-aspnet-codegenerator --version 9.0.0

    . Sintaxe


        dotnet aspnet-codegenerator controller -name NomeDoController -async -api -m NomeDoModelo -dc NomeDoDbContext -outDir Controllers

        . Este comando cria um novo controller com o nome especificado, com suporte a async/await, API e usando o modelo e contexto de dados especificados.

        . Aqui está uma explicação dos parâmetros:

            -name: especifica o nome do controller.
            -async: especifica que o controller deve ser criado com suporte a async/await.
            -api: especifica que o controller deve ser criado como um controller API.
            -m: especifica o nome do modelo que o controller deve usar.
            -dc: especifica o nome do contexto de dados que o controller deve usar.
            -outDir: especifica o diretório onde o controller deve ser criado.

    . Exemplo

        dotnet aspnet-codegenerator controller -name ProdutosController -async -api -m Produto -dc MeuDbContext -outDir Controllers  

        # dotnet aspnet-codegenerator controller -name PeopleController -async -api -outDir Controllers

    . Crie a classe "PeopleController.cs" dentro da pasta "Controllers" com o conteúdo abaixo, ou execute o comando "dotnet cli" acima:

        using Microsoft.AspNetCore.Http;
        using Microsoft.AspNetCore.Mvc;
        using Microsoft.AspNetCore.Authorization;

        namespace DotnetApiCompleteAuth.Controllers;

        [Route("api/[controller]")]
        [ApiController]
        public class PeopleController : ControllerBase
        {
            [HttpGet]
            [AllowAnonymous]
            public IActionResult GetPeople()
            {
                return Ok("People data");
            }

            [HttpPost]
            public IActionResult CreatePerson()
            {
                return Ok("Person is created");
            }
        }

    . Acesse a classe "Program.cs" e insira as linhas abaixo:

        using AspNetCore.Scalar;

        var builder = WebApplication.CreateBuilder(args);

        builder.Services.AddControllers();

        builder.Services.AddEndpointsApiExplorer();
        builder.Services.AddSwaggerGen();

        // Linha Inserida
        builder.Services.Configure<RouteOptions>(options =>
        {
            options.LowercaseUrls = true; // Força URLs em minúsculas
        });

        ...

    . Executando o projeto pela solution:

        dotnet clean

        dotnet restore

        dotnet build

        dotnet run --project DotnetApiCompleteAuth/ 

    . Executando o projeto diretamente pelo projeto:

        cd DotnetApiCompleteAuth

        dotnet clean

        dotnet restore

        dotnet build

        dotnet run

    . Configurando o swagger

        . Acesse o terminal e execute o comando abaixo:

            dotnet add package Swashbuckle.AspNetCore --version 8.1.1

        . Acesse a classe "Program.cs" e insira as linhas abaixo:

            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.

            builder.Services.AddControllers();

            builder.Services.AddEndpointsApiExplorer();         // linha inserida
            builder.Services.AddSwaggerGen();                   // Linha inserida


            var app = builder.Build();

            // Bloco inserido
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();                               // Linha inserida
                app.UseSwaggerUI();                             // Linha inserida
            }


            app.UseHttpsRedirection();

            app.UseAuthorization();

            app.MapControllers();

            app.Run();

        . Levante o projeto e execute a URL abaixo no navegador:

            http://localhost:[porta]/swagger/index.html

    . Configurando o Scalar:

        . Caso queira adaptar o Scalar para a versão do .net9.0 em diante verifique os links abaixo:

            # A partir 20:40
            https://www.youtube.com/watch?v=Tx49o-5tkis&list=PL7yxJa4Na-ir9DLuPL_8kYhyHJXCoPyaR&index=4

            https://guides.scalar.com/scalar/scalar-api-references/net-integration

            https://medium.com/@encinecarlos/documentando-apis-net-com-scalar-2025bda7f39a

            https://carloscds.net/2024/06/aspnetcore-swagger-scalar/

        . Acesse o terminal e execute o comando abaixo na pasta raiz do projeto API:

            dotnet add package AspNetCore.Scalar --version 1.1.1

        . Acesse a classe "Program.cs" e insira as linhas abaixo:

            using AspNetCore.Scalar;                                    // Linha inserida

            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.

            builder.Services.AddControllers();

            builder.Services.AddEndpointsApiExplorer();         
            builder.Services.AddSwaggerGen();                   


            var app = builder.Build();

            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();                               
                app.UseSwaggerUI();   
            }

            // Bloco Inserido
            app.UseScalar(options =>
            {
                options.UseTheme(Theme.BluePlanet);
                options.UseLayout(Layout.Classic);

                options.RoutePrefix = "api-docs";

                options.DocumentTitle = "Documentação das APIs";
            });

            app.UseHttpsRedirection();

            app.UseAuthorization();

            app.MapControllers();

            app.Run();

        . Levante o projeto e execute a URL abaixo no navegador:

            http://localhost:[porta]/api-docs

    . Acesse o Postman e execute as APIs com os parâmetros abaixo:

        method: GET
        url: http://localhost:[porta]/api/people

        method: POST
        url: http://localhost:[porta]/api/people

    . Acesse a URL abaixo e execute as APIs do projeto:

        http://localhost:[porta]/api-docs    

5. Adding required Nuget Package

    . Na pasta raiz do projeto "webapi" execute os comandos abaixo:

        cd src/DotnetApiCompleteAuth

        dotnet add package Microsoft.EntityFrameworkCore --version 8.0.15

        dotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.15

        dotnet add package Microsoft.EntityFrameworkCore.Design --version 8.0.15

        dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version 8.0.15

        dotnet add package Pomelo.EntityFrameworkCore.MySql --version 8.0.3

        dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 8.0.15

        # Execute a linha abaixo caso o "dotnet-ef" não existir no ambiente
        dotnet tool install --global dotnet-ef --version 8.0.15

6. Create Docker Container for Database MySQL

    . Veja a instalação do docker no item "2. Enviroment - Instalação do Docker"

	. Instalação do container do MySQL

		docker pull mysql
		docker images

		. Executando o container MySQL criado:
		
			. Forma 1 - De forma pura sem nenhuma configuração

				docker run -e MYSQL_ROOT_PASSWORD=root --name dotnetdb -d mysql:8.0

				docker inspect dotnetdb | grep IPAddress

				mysql -u root -p -h [ IPAddress "172.17.02" ]			
                ou 			
                docker exec -it dotnetdb bash	ou mysql -uroot -proot -h172.17.0.2

				docker start/restart c342845054d1
				docker ps
				
                docker stop c342845054d1 		
                ou 	
                docker stop dotnetdb

			. Forma 2 - Acessando o container e executando o MySQL dentro dele

				docker run -e MYSQL_ROOT_PASSWORD=root --name dotnetdb -d mysql:8.0
					ou 
				docker start 1fa7691c5482
					ou 
				docker start dotnetdb

				docker stop c342845054d1 		
                ou 	
                docker stop dotnetdb

				docker ps -a
				docker exec -it dotnetdb bash	
				mysql -u root -p

			. Forma 3 - Executando o Container do MySQL no localhost numa porta diferente 3306:

				docker run -e MYSQL_ROOT_PASSWORD=root --name dotnetdb-1 -d -p 6603:3306 mysqL:8.0
				docker start dotnetdb
				docker ps
				
                mysql -u root -p -h 127.0.0.1 -P 6603	
                ou 
                mysql -uroot -proot -h172.17.0.2

				docker stop c342845054d1 		
                ou 	
                docker stop dotnetdb


Tutorial ASP.NET MVC, EntityFramework, MySQL e Docker


6. ConnectionString and Application User

    . Verificar detalhes sobre o arquivo "AppSettings.[Development].json" na "Aula 71. Configurações de Debug" do curso "Fundamentos ASP.NET 6 - Balta"

    . Acesse o arquivo "appsettings.Development.json" e insira as linhas abaixo?

        {
        "Logging": {
            "LogLevel": {
            "Default": "Information",
            "Microsoft.AspNetCore": "Warning"
            },
            "ConnectionStrings": {                      // Linha inserida
                "DotNetCoreMySQLAppConnection": "server=localhost; port=3306; database=productsdb; user=root; password=root; Persist Security Info=false; Connect Timeout=300;SSL Mode=None"
            },
        }
        }




10.47
    
