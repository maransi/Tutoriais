
1. Crie um projeto Maven:

Ctrl + N
Digite "Maven"
Escolha a opção Maven Project -> Next
Acione a opção "Create a Simple Project"
Digite no Group Id e Artefact Id "rotherdan"; e no item Packaging "war" -> Finish

2. Substitua o pom.xml pelo abaixo:

<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>seoul</groupId>
	<artifactId>seoul</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<properties>
		<java.version>1.8</java.version>
		<maven-compiler-pluging.version>3.2</maven-compiler-pluging.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- Versão do spring -->
		<spring.version>4.0.5.RELEASE</spring.version>
		<!-- Versão do spring Security -->
		<spring.security.version>4.3.12.RELEASE</spring.security.version>
		<!-- Versão do jstl -->
		<jstl.version>1.2</jstl.version>
		<hibernate.version>5.2.10.Final</hibernate.version>
		<!-- Mapeamento de diretório -->
		<endorsed.dir>${project.build.directory}/endorsed</endorsed.dir>
		<!-- Encoding do projeto -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>


	<dependencies>
		<!-- https://mvnrepository.com/artifact/c3p0/c3p0 -->
		<dependency>
		    <groupId>c3p0</groupId>
		    <artifactId>c3p0</artifactId>
		    <version>0.9.1</version>
		</dependency>
	
		<!-- https://mvnrepository.com/artifact/cglib/cglib -->
		<dependency>
		    <groupId>cglib</groupId>
		    <artifactId>cglib</artifactId>
		    <version>2.2</version>
		</dependency>
	
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 -->
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-collections4</artifactId>
		    <version>4.1</version>
		</dependency>
	
		<!-- https://mvnrepository.com/artifact/commons-logging/commons-logging -->
		<dependency>
		    <groupId>commons-logging</groupId>
		    <artifactId>commons-logging</artifactId>
		    <version>1.2</version>
		</dependency>
	
		 <dependency>
		   <groupId>javax.transaction</groupId>
		   <artifactId>jta</artifactId>
		   <version>1.1</version>
		 </dependency>	
	
	
		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
<!-- 		 <dependency> <groupId>org.hibernate</groupId> <artifactId>hibernate-core</artifactId> 
			<version>5.2.16.Final</version> </dependency>  -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.version}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-testing -->
		<dependency>
		    <groupId>org.hibernate</groupId>
		    <artifactId>hibernate-testing</artifactId>
		    <version>3.3.1.GA</version>
		    <scope>test</scope>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.18</version>
		</dependency>

<!-- 
		<dependency>
		    <groupId>org.hibernate.javax.persistence</groupId>
		    <artifactId>hibernate-jpa-2.0-api</artifactId>
		    <version>1.0.1.Final</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
		</dependency>
 -->
		<dependency>
			<groupId>javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.12.1.GA</version>
		</dependency>

		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
			<type>jar</type>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<type>jar</type>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
	</dependencies>
	
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-pluging.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
		</plugins>
	</build>
	
</project>



3. Clique com o direito no nó "Deployment Descriptor" e acione a opção "Generate Deployment Descriptor"
    para criar o arquivo "web.xml"

4. Altere o "web.xml" com o código abaixo:

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>seoul</display-name>

	<!-- Configuracao do Spring -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/applicationContext.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>


	<!-- The Bootstrap listener to start up and shut down Spring's root WebApplicationContext. 
		It is registered to Servlet Container -->

	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<!-- Fim -->

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
</web-app>


5. Dentro da pasta WEB-INF insira o arquivo "applicationContext.xml" com o conteúdo abaixo:

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- Seta anota�oes para serem usadas pelo Spring -->
	<context:annotation-config />
	<!-- Define o pacote onde o Spring vai procurar por beans anotados -->
	<context:component-scan base-package="br" />

	<!-- define que as transa�oes irao ser anotadas -->
	<tx:annotation-driven />
	<!-- Configuracao do Banco de Dados -->

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/marco" />
		<property name="username" value="marco" />
		<property name="password" value="brasil2" />
	</bean>
 
	<!-- Configuracao do Hibernate -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
 		<property name="persistenceUnitName" value="PU" /> 
		<property name="dataSource" ref="dataSource" />

	</bean>
	<!-- Configuracao do gerente de transacoes do Spring -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
</beans>


6. Crie a pasta "src/main/resources/META-INF, crie o arquivo "persistence.xml" com o código abaixo:

<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0">
	<persistence-unit name="PU">
<!-- 		<provider>org.hibernate.ejb.HibernatePersistence</provider> -->
		<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
		<class>br.com.ativo.VeiculoBean</class>
		<properties>
			<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect" />
			<property name="hibernate.hbm2ddl.auto" value="update" />
			<property name="hibernate.show_sql" value="true" />
			<property name="hibernate.format_sql" value="true" />
			<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />
			<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/marco" />
			<property name="javax.persistence.jdbc.user" value="marco" />
			<property name="javax.persistence.jdbc.password" value="brasil2" />
		</properties>
	</persistence-unit>
</persistence>


7. Criar na pasta "src/main/java" o arquivo log4j.properties:

#### Usando 2 appenders, 1 para logar no console, outro para um arquivo

log4j.rootCategory=WARN,stdout,fileOut

# Imprime somente mensagens com priority WARN ou mais alto para o logger

#lembrando a ordem: DEBUG - INFO - WARN - ERROR - FATAL

log4j.category.atacadao=DEBUG

#### O primeiro appender escreve no console

log4j.appender.stdout=org.apache.log4j.ConsoleAppender

log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

### Pattern que mostra o nome do arquivo e numero da linha, porem sem data e hora

log4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n

#### O segundo appender escreve em um arquivo e faz um bkp ao atingir o max

log4j.appender.fileOut =org.apache.log4j.RollingFileAppender

log4j.appender.fileOut.File=log.log

### Controla o tamanho maximo do arquivo

log4j.appender.fileOut.MaxFileSize=1000KB

### Faz backup dos arquivos de log (apenas 1)

log4j.appender.fileOut.MaxBackupIndex=1

log4j.appender.fileOut.layout=org.apache.log4j.PatternLayout

#####este formato esta em ingles: 2011-04-24 e imprime o nro da linha L

log4j.appender.fileOut.layout.ConversionPattern=%d [%t] %5p %c:%L - %m%n



7. Crie a pasta "src/main/webapp/cs" e crie os arquivos abaixo:

demos.css
---------

body {
	font-family: Arial, Helvetica, sans-serif;
}

.demo-loading {
	visibility: hidden;
}

table {
	font-size: 1em;
}

.demo-description {
	clear: both;
	padding: 12px;
}

.ui-draggable, .ui-droppable {
	background-position: top;
}


globa.css
---------

@CHARSET "ISO-8859-1";

.txtPretoBold8 {
	font-size: 8pt;
	color: #000000;
	font-weight: bold;
}

.txtPretoBold10 {
	font-size: 10pt;
	color: #000000;
	font-weight: bold;
}

.txtBold9 {
	font-size: 8pt;
	font-family: Tahoma;
	color: #336699;
	font-weight: bold;
}

.txt9 {
	font-size: 8pt;
	font-family: Tahoma;
	color: #336699;
	font-weight: normal;
}

.txtVermelhoBold8 {
	font-size: 8pt;
	color: #FB0000;
	font-weight: bold;
	font-family: Tahoma;
}

input submit {
	font-family: verdana;
	font-style: normal;
	font-weight: bold;
	font-size: 8pt;
	vertical-align: middle;
	text-transform: normal;
	text-align: center middle;
	border-style: outset;
	border-width: 1px;
	background-color: #FFFFFF;
	padding-left: 2px;
	padding-right: 2px;
	color: #336699;
	height: 22px;
	cursor: hand;
	filter: progid:DXImageTransform.Microsoft.Gradient(gradientType=0,
		startColorStr=#ffffff, endColorStr=#eaeaea );
}

input {
	font-family: verdana, arial;
	font-style: normal;
	font-weight: normal;
	font-size: 8pt;
	height: 17px;
	color: #336699;
	padding: 0px;
	padding-left: 2px;
	padding-right: 2px;
	border: 1px solid #336699;
	vertical-align: text-middle;
}

.inputRadio,input.inputCheckBox {
	font-family: verdana, arial;
	font-style: normal;
	font-weight: normal;
	font-size: 8pt;
	color: #336699;
	border-width: 0px;
	padding: 0px;
	padding-left: 2px;
	padding-right: 2px;
}

fieldset {
	border: 1px solid #336699;
	padding: 0.2em 0.5em;
	vertical-align: text-middle;
}

legend {
	padding: 0.2em 0.5em;
	font-size: 90%;
	text-align: center;
	font-size: 9pt;
	color: #336699;
	font-weight: bold;
	font-family: Tahoma;
}

.content {
	font-size: 9px;
	font-style: normal;
	line-height: normal;
	font-weight: bold;
	font-variant: normal;
	text-transform: none;
	color: #336699;
	text-decoration: none;
}

img {
	BORDER-TOP-STYLE: none;
	BORDER-RIGHT-STYLE: none;
	BORDER-LEFT-STYLE: none;
	BORDER-BOTTOM-STYLE: none;
	vertical-align: bottom;
}

.backGround-color-Header {
	background-color: #cdcbcb;
}

.embalagem table {
	font-family: Tahoma;
	font-style: normal;
	font-weight: normal;
	font-size: 8pt;
	color: #336699;
	vertical-align: text-middle;
	text-transform: none;
	text-align: center;
	border: 0;
	padding: 0;
	spacing: 0;
}

.embalagem th {
	font-family: Tahoma;
	font-style: normal;
	font-weight: bold;
	font-size: 10pt;
	color: #FFFFFF;
	vertical-align: center;
	text-transform: normal;
	text-align: center;
	background-color: #cdcbcb;
	height: 32px;
}

.embalagem tr {
	font-family: Tahoma;
	font-style: normal;
	font-weight: bold;
	font-size: 10pt;
	color: #FFFFFF;
	vertical-align: center;
	text-transform: normal;
	background-color: #336699;
	height: 34px;
}

.embalagem td {
	font-family: Tahoma;
	font-style: normal;
	font-weight: normal;
	font-size: 8pt;
	color: #336699;
	text-transform: none;
	text-decoration: none;
	vertical-align: center;
}

8. Crie a pasta "/src/main/webapp/js"

9. Acesse o site https://www.jeasyui.com/download/ , baixe a versão JQuery. Encontre os arquivos "easyloader.js" e "jquery.easyui.min.js"
    e insira na pasta "/src/main/webapp/js". Ou execute os comandos npm abaixo:

	. Acesse uma pasta para armazenar as bibliotecas 
	. Digite "npm install jquery-easyui
	. Acesse a pasta node_modules para pegar os arquivos css, js, etc.

10. Acesse o site "https://jquery.com/download/", baixe a biblioteca JQuery. Encontre o arquivo "jquery.min.js" e insira na pasta
    "/src/main/webapp/js"

11. Crie a pasta src/main/webapp/themes e insira todos os arquivos themes do pacote jquery-easyui

12. Criar as classes Patterns abaixo:


package br.com.pattern;

public enum OperacaoCRUD {
	CREATE, READ, UPDATE, DELETE
}

------------------------------

package br.com.pattern;

import java.util.List;

public interface IDAO<T,K> {

	public boolean insert( T t)  throws Exception;

	public boolean update( T t)  throws Exception;

	public boolean delete( T t)  throws Exception;

	public List<T> findAll()  throws Exception;
	
	public T findById( K k )  throws Exception;
	
	public List<T> findByName( String nome )  throws Exception;
	
	public void setupTest( OperacaoCRUD operacaoCRUD )  throws Exception;

}

------------------------------

package br.com.pattern;

import java.util.List;

import br.com.pattern.OperacaoCRUD;

public interface IService<T, K> {

	public boolean insert(T t) throws Exception;

	public boolean update(T t) throws Exception;

	public boolean delete(T t) throws Exception;

	public List<T> findAll() throws Exception;

	public T findById(K k) throws Exception;

	public List<T> findByName(String nome) throws Exception;

	public void setupTest( OperacaoCRUD operacaoCRUD ) throws Exception;

}


13. Criar as classes de negócio abaixo:

package br.com.ativo;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQuery;
import javax.persistence.Table;


@Entity
@Table(name="veiculo")
public class VeiculoBean {

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Integer codigoVeiculo;

	@Column(name="ano_fabricacao")
	private String	anoFabricacao;

	@Column(name="marca")
	private String marca;

	@Column(name="placa")
	private String placa;

	@Column(name="nome")
	private String nome;

	
	
	public String getAnoFabricacao() {
		return anoFabricacao;
	}
	public void setAnoFabricacao(String anoFabricacao) {
		this.anoFabricacao = anoFabricacao;
	}
	public String getNome() {
		return nome;
	}
	public void setNome(String nome) {
		this.nome = nome;
	}
	public Integer getCodigoVeiculo() {
		return codigoVeiculo;
	}
	public void setCodigoVeiculo(Integer codigoVeiculo) {
		this.codigoVeiculo = codigoVeiculo;
	}
	public String getMarca() {
		return marca;
	}
	public void setMarca(String marca) {
		this.marca = marca;
	}
	public String getPlaca() {
		return placa;
	}
	public void setPlaca(String placa) {
		this.placa = placa;
	}

	public VeiculoBean( String nome, String anoFabricacao, String marca,
			String placa) {
		super();
//		this.codigoVeiculo = codigoVeiculo;
		this.anoFabricacao = anoFabricacao;
		this.marca = marca;
		this.placa = placa;
		this.nome = nome;
	}


	public VeiculoBean(Integer codigoVeiculo) {
		super();
		this.codigoVeiculo = codigoVeiculo;
	}
	
	public VeiculoBean(){
		super();
	}
	@Override
	public String toString() {
		return "VeiculoBean [codigoVeiculo=" + codigoVeiculo + ", anoFabricacao=" + anoFabricacao + ", marca=" + marca
				+ ", placa=" + placa + "]";
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((codigoVeiculo == null) ? 0 : codigoVeiculo.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		VeiculoBean other = (VeiculoBean) obj;
		if (codigoVeiculo == null) {
			if (other.codigoVeiculo != null)
				return false;
		} else if (!codigoVeiculo.equals(other.codigoVeiculo))
			return false;
		return true;
	}
	
	
	
}

-------------------------------------

package br.com.ativo;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.web.context.support.SpringBeanAutowiringSupport;

import br.com.pattern.IDAO;
import br.com.pattern.IService;
import br.com.pattern.OperacaoCRUD;

@Service
public class VeiculoService implements IService<VeiculoBean, Integer> {

	@Autowired
	@Qualifier("veiculoDAO")
	private IDAO veiculoDAO;
	
	public VeiculoService() {
		super();

		SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(this);

	}

	public IDAO<VeiculoBean, Integer> getVeiculoDAO() {
		return veiculoDAO;
	}

	public void setVeiculoDAO(VeiculoDAO veiculoDAO) throws Exception {
		this.veiculoDAO = veiculoDAO;
	}

	public boolean insert(VeiculoBean veiculo) throws Exception {
		return veiculoDAO.insert(veiculo);
	}

	public boolean update(VeiculoBean veiculo) throws Exception {
		return veiculoDAO.update(veiculo);
	}

	public boolean delete(VeiculoBean veiculo) throws Exception {
		return veiculoDAO.delete(veiculo);
	}

	@SuppressWarnings("unchecked")
	public List<VeiculoBean> findAll() throws Exception {
		return veiculoDAO.findAll();
	}

	public List<VeiculoBean> getFindAll() throws Exception{
		return this.findAll();
	}

	public String getMensagem(){
		return "Hello";
	}

	public VeiculoBean findById(Integer k) throws Exception{
		return (VeiculoBean) veiculoDAO.findById(k);
	}
	
	public List<VeiculoBean> findByName( String nome ) throws Exception{
		return  veiculoDAO.findByName( nome );
	}

	public void setupTest( OperacaoCRUD operacaoCRUD) throws Exception {
		veiculoDAO.setupTest(operacaoCRUD);
	}
}

--------------------------------

package br.com.ativo;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import br.com.pattern.IDAO;
import br.com.pattern.OperacaoCRUD;


@Repository
public class VeiculoDAO implements IDAO<VeiculoBean, Integer> {

	
	
	@PersistenceContext( unitName = "PU")
	private  EntityManager em; 
	
	@Transactional
	public boolean update(VeiculoBean t) throws Exception{
		em.merge(t);
	
		return true;
	}

	@Transactional
	public boolean delete(VeiculoBean t)  throws Exception {

		try {
			VeiculoBean veiculo = findById(t.getCodigoVeiculo());

			VeiculoBean v = em.merge(veiculo);
			em.remove(v);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return true;
	}

	@Transactional
	public boolean insert(VeiculoBean t)  throws Exception {
		em.persist(t);
		
		return true;
	}

	@Transactional
	public List<VeiculoBean> findAll()  throws Exception {
		Query usu = em.createQuery("select object(v) from VeiculoBean as v");
		return usu.getResultList();
	}
	public VeiculoDAO() {
		super();
	}

	@Transactional
	public VeiculoBean findById(Integer k) throws Exception {
		return em.find(VeiculoBean.class, k);
	}
	
	@Transactional
	public List<VeiculoBean> findByName( String nome ){
		Query query = em.createQuery("Select v from VeiculoBean as v where v.nome = :nome ");
		
		query.setParameter("nome", nome);
		
		List<VeiculoBean> veiculos = query.getResultList();
		
		for( VeiculoBean veiculo : veiculos) {
			System.out.println(veiculo.getNome());
		}
		
		
		return veiculos;
	}
	
	@Transactional
	public void setupTest( OperacaoCRUD operacaoCRUD )  throws Exception{
		List<VeiculoBean> veiculos = findByName("TESTE");
		
		for( VeiculoBean v : veiculos ) {
			delete(v);
		}
		
		if (operacaoCRUD != OperacaoCRUD.CREATE) {
			VeiculoBean veiculoBean = new VeiculoBean("TESTE", "2012","FORD", "GCD1531");
			
			em.persist( veiculoBean );
		} 
	}
	
	
	
}

-------------------------------

package br.com.ativo;

import static org.junit.Assert.assertTrue;

import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import br.com.pattern.IService;
import br.com.pattern.OperacaoCRUD;

@ContextConfiguration (locations = { "file:src/main/webapp/WEB-INF/applicationContext.xml"})
@RunWith(SpringJUnit4ClassRunner.class)
public class VeiculoTest {

	/**
	 * @param args
	 */
	@Autowired
	@Qualifier("veiculoService")
	private IService<VeiculoBean, Integer> veiculoService;

	private boolean hasSetup = false;

	@Before
	public void start() throws Exception {

	}
	
	@After
	public void finish() throws Exception{
/*		
		3. Apagar os dois componentes criados acima
*/	
	}
	
	@Test
	public void testInsert() throws Exception{
		veiculoService.setupTest( OperacaoCRUD.CREATE );
		
		VeiculoBean veiculoBean = new VeiculoBean("TESTE", "2012","FORD", "GCD1531");
		
		assertTrue(veiculoService.insert(veiculoBean));

	}
	
	@Test
	public void testFindAll() throws Exception{
		List<VeiculoBean> veiculos = veiculoService.findAll();
		
		assertTrue(veiculos.size()>0);

	}

	@Test
	public void testUpdate() throws Exception{
		veiculoService.setupTest( OperacaoCRUD.UPDATE );
		
		List<VeiculoBean> veiculos = veiculoService.findByName("TESTE");
		
		VeiculoBean veiculo = veiculos.get(0);
		
		veiculo.setPlaca("TESTE");
		
		assertTrue(veiculoService.update(veiculo));
		
		veiculoService.delete(veiculo);
	}

	@Test
	public void testDelete() throws Exception{
		try {
			veiculoService.setupTest( OperacaoCRUD.DELETE );
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		List<VeiculoBean> veiculos = veiculoService.findByName("TESTE");
		
		VeiculoBean veiculo = veiculos.get(0);

		try {
			assertTrue(veiculoService.delete(veiculo));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

------------------------------------

package br.com.ativo;

import org.junit.runner.RunWith;
import org.junit.runners.Suite;
import org.junit.runners.Suite.SuiteClasses;

@RunWith(Suite.class)
@SuiteClasses({
    VeiculoTest.class
        
})

public class AllTests {


}        


14. Criar na pasta "src/main/webapp" o arquivo index.jsp abaixo:

<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@ taglib  uri="http://java.sun.com/jsp/jstl/core"  prefix='c'%>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    	               "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>GlassFish JSP Page</title>
<link rel="stylesheet" type="text/css" href="themes/default/easyui.css">
<link rel="stylesheet" type="text/css" href="themes/default/combo.css">
<link rel="stylesheet" type="text/css" href="themes/icon.css">
<link rel="stylesheet" type="text/css" href="cs/demo.css">
<link rel="stylesheet" type="text/css" href="cs/global.css">
<script type="text/javascript" src="js/jquery.min.js"></script>
<script type="text/javascript" src="js/jquery.easyui.min.js"></script>

</head>
<body>
	<jsp:useBean id="veiculoService" class="br.com.ativo.VeiculoService" scope="session" />
	<form id="veiculo" action="veiculoServlet">
		<div id="tt" class="easyui-tabs" tools="#tab-tools"
			style="width: 720px; height: 420px;">
			<div title="Cadastro" tools="#p-tools"
				style="padding: 10px; background: #fafafa; width: 710px; height: 410px; overflow: hidden;">
				<div id="cadastro" class="easyui-panel"
					iconCls="icon-write"
					style="width: 700px; height: 365px; padding: 10px; background: #fafafa;align:center;">
					<table width="60%" cellspacing="1" cellpadding="1">
						<thead>
							<td style="width: 70px"><font class="txtBold9">Codigo</font>
							</td>
							<td style="width: 100px"><font class="txtBold9">Ano</font></td>
							<td style="width: 100px"><font class="txtBold9">Marca</font></td>
							<td style="width: 100px"><font class="txtBold9">Placa</font>
							</td>
						</thead>
						<c:forEach items="${veiculoService.findAll}" var="veiculo">
							<tr>
								<td>
									<font class="txt9">
										<c:out value="${veiculo.codigoVeiculo}"/>
									</font>
								</td>
								<td>
									<font class="txt9">
										<c:out value="${veiculo.anoFabricacao}"/>
									</font>
								</td>
								<td>
									<font class="txt9">
										<c:out value="${veiculo.marca}"/>
									</font>
								</td>
								<td>
									<font class="txt9">
										<c:out value="${veiculo.placa}"/>
									</font>
								</td>
							</tr>
						</c:forEach>
					</table>
				</div>
			</div>
		</div>
	</form>
</body>
</html>






