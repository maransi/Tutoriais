1. Acesse o seu banco e database;


2. Crie a tabela abaixo:

CREATE TABLE proprietario( codigoProprietario		INT 	NOT NULL AUTO_INCREMENT PRIMARY KEY,
									nome							VARCHAR(50) );


INSERT INTO proprietario( nome ) VALUES('ANDRE MENDES DE ARAUJO');
INSERT INTO proprietario( nome ) VALUES('JOSE DA SILVA');
INSERT INTO proprietario( nome ) VALUES('MARIA DE LOURDES DA SILVA');
INSERT INTO proprietario( nome ) VALUES('JOAO BATISTA DA SILVA');
INSERT INTO proprietario( nome ) VALUES('JOAQUIM DE ANDRADE LISBOA');
INSERT INTO proprietario( nome ) VALUES('JOEL FERREIRA DA COSTA');



CREATE TABLE veiculo( codigoVeiculo		INT 	NOT NULL AUTO_INCREMENT PRIMARY KEY,
								ano				CHAR(4) NOT NULL,
								marca				VARCHAR(20) NOT NULL,
								placa				VARCHAR(7) NOT NULL,
								codigoProprietario INT NOT NULL,
									CONSTRAINT fkVeiculo_Proprietario
										FOREIGN KEY(codigoProprietario)
										REFERENCES proprietario(codigoProprietario) );


INSERT INTO veiculo( ano, marca, placa, codigoProprietario )
VALUES('2011','FORD','EZJ4363', 1);

INSERT INTO veiculo( ano, marca, placa, codigoProprietario )
VALUES('2016','CHEVROLET','DIK4585', 4);

INSERT INTO veiculo( ano, marca, placa, codigoProprietario )
VALUES('2005','VOLKSWAGEN','QTD9167', 5);


3. Crie um projeto Maven:

Ctrl + N
Digite "Maven"
Escolha a opção Maven Project -> Next
Acione a opção "Create a Simple Project"
Digite no Group Id e Artefact Id "rotherdan"; e no item Packaging "jar" -> Finish


4. Substitua o pom.xml pelo abaixo:

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>itausa</groupId>
	<artifactId>itausa</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>itausa</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- Versão do spring -->
		<spring.version>4.3.12.RELEASE</spring.version>
		<!-- Versão do spring Security -->
		<spring.security.version>4.3.12.RELEASE</spring.security.version>
		<!-- Versão do jstl -->
		<jstl.version>1.2</jstl.version>
		<!-- Mapeamento de diretório -->
		<endorsed.dir>${project.build.directory}/endorsed</endorsed.dir>
		<!-- Encoding do projeto -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>


	<dependencies>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>3.6.0.Final</version>
			<type>jar</type>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.18</version>
		</dependency>

		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
			<type>jar</type>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-beans -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.12.1.GA</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<type>jar</type>
		</dependency>
	</dependencies>
</project>




4. Crie dentro da pasta "src/main/resource" o arquivo abaixo com nome de springContext.xml.
   Atenção com os parâmetros de conexão (url, username e password), elas variarão de ambiente para ambiente

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	<!-- Indica ao spring que as configurações dos beans são por anotações -->
	<context:annotation-config />

	<!-- Necessário para o Spring 3 encontrar as classes anotadas -->
	<context:component-scan base-package="br.com.devmedia.artigo" />

	<!-- Configura a SessionFactory do Hibernate -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="packagesToScan" value="br.com.devmedia.artigo.model" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.connection.url">jdbc:mysql://mercurio:3306/jb23112017</prop>
				<prop key="hibernate.connection.username">desenvolvedor</prop>
				<prop key="hibernate.connection.password">jb1155</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.current_session_context_class">thread</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>

</beans>




5.	Criação do log4j.properties na pasta src/main/java

#### Usando 2 appenders, 1 para logar no console, outro para um arquivo

log4j.rootCategory=WARN,stdout,fileOut

# Imprime somente mensagens com priority WARN ou mais alto para o logger

#lembrando a ordem: DEBUG - INFO - WARN - ERROR - FATAL

log4j.category.atacadao=DEBUG

#### O primeiro appender escreve no console

log4j.appender.stdout=org.apache.log4j.ConsoleAppender

log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

### Pattern que mostra o nome do arquivo e numero da linha, porem sem data e hora

log4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n

#### O segundo appender escreve em um arquivo e faz um bkp ao atingir o max

log4j.appender.fileOut =org.apache.log4j.RollingFileAppender

log4j.appender.fileOut.File=log.log

### Controla o tamanho maximo do arquivo

log4j.appender.fileOut.MaxFileSize=1000KB

### Faz backup dos arquivos de log (apenas 1)

log4j.appender.fileOut.MaxBackupIndex=1

log4j.appender.fileOut.layout=org.apache.log4j.PatternLayout

#####este formato esta em ingles: 2011-04-24 e imprime o nro da linha L

log4j.appender.fileOut.layout.ConversionPattern=%d [%t] %5p %c:%L - %m%n



7.	Criação da interface DAO

package br.com.devmedia.artigo.dao;

import java.io.Serializable;
import java.util.List;

public interface IDao<T extends Serializable> {
    void save(T entity);
    List<T> findByDescricao(String descricao);
    List<T> findAll();
}

8.	Criação do primeiro DAO

package br.com.devmedia.artigo.dao.dao1;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import br.com.devmedia.artigo.dao.IDao;
import br.com.devmedia.artigo.model.Proprietario;

@Repository("proprietarioDao")
public class ProprietarioDao implements IDao<Proprietario> {
    private final SessionFactory sessionFactory;
    private Session session;

    @Autowired
    public ProprietarioDao(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    public Session getSession() {
        return sessionFactory.openSession();
    }

    public void save(Proprietario entity) {
        session = getSession();
        try {
            session.getTransaction().begin();
            session.save(entity);
            session.getTransaction().commit();
        } catch (Throwable t) {
            session.getTransaction().rollback();
            t.printStackTrace();
        } finally {
            session.close();
        }
    }

    public List<Proprietario> findByDescricao(String descricao) {
        List<Proprietario> proprietarios = null;
        session = getSession();
        try {
            proprietarios = session.createQuery("FROM Proprietario WHERE nome like :nome")
                            .setParameter("nome", descricao)
                            .list();
        } catch (Throwable t) {
            t.printStackTrace();
        } finally {
            session.close();
        }
        return proprietarios;
    }

    public List<Proprietario> findAll() {
        List<Proprietario> proprietarios = null;
        session = getSession();
        try {
            proprietarios = session.createQuery("FROM Proprietario").list();
        } catch (Throwable t) {
            t.printStackTrace();
        } finally {
            session.close();
        }
        return proprietarios;
    }
}


9.	Criação do segundo DAO:


package br.com.devmedia.artigo.dao.dao1;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import br.com.devmedia.artigo.dao.IDao;
import br.com.devmedia.artigo.model.Veiculo;

@Repository("veiculoDao")
public class VeiculoDao implements IDao<Veiculo> {

    private final SessionFactory sessionFactory;
    private Session session;

    @Autowired
    public VeiculoDao(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    public Session getSession() {
        return sessionFactory.openSession();
    }

    public void save(Veiculo entity) {
        session = getSession();
        try {
            session.getTransaction().begin();
            session.save(entity);
            session.getTransaction().commit();
        } catch (Throwable t) {
            session.getTransaction().rollback();
            t.printStackTrace();
        } finally {
            session.close();
        }
    }

    public List<Veiculo> findByDescricao(String placa) {
        List<Veiculo> veiculos = null;
        session = getSession();
        try {
            veiculos = session.createQuery("FROM Veiculo WHERE placa = :placa")
                        .setParameter("placa", placa)
                        .list();
        } catch (Throwable t) {
            t.printStackTrace();
        } finally {
            session.close();
        }
        return veiculos;
    }

    @SuppressWarnings({"unchecked"})
    public List<Veiculo> findAll() {
        List<Veiculo> veiculos = null;
        session = getSession();
        try {
            veiculos = session.createQuery
            ("FROM Veiculo").list();
        } catch (Throwable t) {
            t.printStackTrace();
        } finally {
            session.close();
        }
        return veiculos;
    }
}

10.	Criação do primeiro facade

package br.com.devmedia.artigo.facade;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import br.com.devmedia.artigo.dao.IDao;
import br.com.devmedia.artigo.model.Proprietario;

@Service("proprietarioFacade")
public class ProprietarioFacade {
    @Autowired
    @Qualifier(value="proprietarioDao")
    private IDao<Proprietario> dao;

    public void save(Proprietario proprietario) {
        dao.save(proprietario);
    }

    public List<Proprietario> findByNome(String nome) {
        return dao.findByDescricao(nome);
    }

    public List<Proprietario> findAll() {
        return dao.findAll();
    }
}

11.	Criação do segundo facade

package br.com.devmedia.artigo.facade;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import br.com.devmedia.artigo.dao.IDao;
import br.com.devmedia.artigo.model.Veiculo;

@Service("veiculoFacade")
public class VeiculoFacade {
    @Autowired
    @Qualifier(value="veiculoDao")
    private IDao<Veiculo> dao;

    public void save(Veiculo veiculo) {
        dao.save(veiculo);
    }

    public List<Veiculo> findByPlaca(String placa) {
        return dao.findByDescricao(placa);
    }

    public List<Veiculo> findAll() {
        return dao.findAll();
    }
}

12.	Criação do primeiro Bean

package br.com.devmedia.artigo.model;

import java.io.Serializable;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

@Entity
@Table(name = "proprietario")
public class Proprietario implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "codigoProprietario")
    private Long id;
    @Column(name = "nome", length = 50,
     nullable = false)
    private String nome;
    @OneToMany(mappedBy="proprietario",
     fetch = FetchType.LAZY)
    @Cascade(CascadeType.ALL)
    private List<Veiculo> veiculos;
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getNome() {
		return nome;
	}
	public void setNome(String nome) {
		this.nome = nome;
	}
	public List<Veiculo> getVeiculos() {
		return veiculos;
	}
	public void setVeiculos(List<Veiculo> veiculos) {
		this.veiculos = veiculos;
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = (prime * result) + ((id == null) ? 0 : id.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Proprietario other = (Proprietario) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}
}



13.	Criação do segundo bean

package br.com.devmedia.artigo.model;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

@Entity
@Table(name = "veiculo")
public class Veiculo implements Serializable {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "codigoVeiculo", unique = true)
	private Long id;
	@Column(name = "ano", length = 4, nullable = false)
	private int anoFabricacao;
	@Column(name = "marca", length = 20, nullable = false)
	private String marca;
	@Column(name = "placa", length = 7, nullable = false)
	private String placa;
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "codigoProprietario", insertable = true, updatable = true)
	@Fetch(FetchMode.JOIN)
	@Cascade(CascadeType.SAVE_UPDATE)
	private Proprietario proprietario;
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public int getAnoFabricacao() {
		return anoFabricacao;
	}
	public void setAnoFabricacao(int anoFabricacao) {
		this.anoFabricacao = anoFabricacao;
	}
	public String getMarca() {
		return marca;
	}
	public void setMarca(String marca) {
		this.marca = marca;
	}
	public String getPlaca() {
		return placa;
	}
	public void setPlaca(String placa) {
		this.placa = placa;
	}
	public Proprietario getProprietario() {
		return proprietario;
	}
	public void setProprietario(Proprietario proprietario) {
		this.proprietario = proprietario;
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * (result + ((id == null) ? 0 : id.hashCode()));
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Veiculo other = (Veiculo) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

}


14.	Criação da primeira classe de teste

package br.com.devmedia.artigo.test;

import static junit.framework.Assert.assertNotNull;

import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import br.com.devmedia.artigo.facade.ProprietarioFacade;
import br.com.devmedia.artigo.model.Proprietario;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = "classpath:applicationContext.xml")
public class ProprietarioTest {
    @Autowired
    @Qualifier("proprietarioFacade")
    private ProprietarioFacade facade;

    @Test
    public void saveTest() {
        Proprietario proprietario = new Proprietario();
        proprietario.setNome("Fibiola Moreno");
        facade.save(proprietario);
        assertNotNull("Falha ao gravar proprietario!",
        proprietario.getId());
    }

    @Test
    public void findByNomeTest() {
        List<Proprietario> proprietarios = facade.findByNome("Fibiola Moreno");
        assertNotNull("Proprietario não localizado!", proprietarios);
    }

    @Test
    public void findAllTest() {
        List<Proprietario> proprietarios = facade.findAll();
        assertNotNull("Lista de proprietarios inexistente!",
        proprietarios);
    }
}

15.	Criação da segunda classe de teste

package br.com.devmedia.artigo.test;

import static junit.framework.Assert.assertNotNull;

import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import br.com.devmedia.artigo.facade.ProprietarioFacade;
import br.com.devmedia.artigo.facade.VeiculoFacade;
import br.com.devmedia.artigo.model.Proprietario;
import br.com.devmedia.artigo.model.Veiculo;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations ="classpath:applicationContext.xml")
public class VeiculoTest {
    @Autowired
    @Qualifier(value="veiculoFacade")
    private VeiculoFacade veiculoFacade;
    @Autowired
    @Qualifier(value="proprietarioFacade")
    private ProprietarioFacade proprietarioFacade;

    @Test
    public void saveTest() {
        List<Proprietario> proprietarios =
        proprietarioFacade.findByNome("Fibiola Moreno");
        Veiculo veiculo = new Veiculo();
        veiculo.setAnoFabricacao(1999);
        veiculo.setMarca("Honda");
        veiculo.setPlaca("AZS0550");
        veiculo.setProprietario(proprietarios.get(0));
        veiculoFacade.save(veiculo);
        assertNotNull("Falha ao gravar veiculo!", veiculo.getId());
    }

    @Test
    public void findByPlaca() {
//        Veiculo veiculo = veiculoFacade.findByPlaca("AZS0550");

    	List<Veiculo> veiculos = veiculoFacade.findByPlaca("AZS0550");

        assertNotNull("Veiculo não existe!", veiculos);
    }

    @Test
    public void findAll() {
        List<Veiculo> veiculos = veiculoFacade.findAll();
        assertNotNull("Lista de veiculos inexistente!", veiculos);
    }
}
