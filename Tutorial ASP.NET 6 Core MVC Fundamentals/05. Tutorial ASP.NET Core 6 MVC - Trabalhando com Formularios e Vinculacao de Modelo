
Tutorial ASP.NET Core 6 MVC - Trabalhando com Formularios e Vinculacao de Modelo
--------------------------------------------------------------------------------


. Inclua a classe "Order.cs" abaixo na pasta "Models":

    using Microsoft.AspNetCore.Mvc.ModelBinding;
    using System.ComponentModel.DataAnnotations;

    namespace bethanysPieShop.Models
    {
        public class Order
        {
            public int OrderId { get; set; }

            public List<OrderDetail>? OrderDetails { get; set; }

            public string FirstName { get; set; } = string.Empty;

            public string LastName { get; set; } = string.Empty;

            public string AddressLine1 { get; set; } = string.Empty;

            public string? AddressLine2 { get; set; }

            public string ZipCode { get; set; } = string.Empty;

            public string City { get; set; } = string.Empty;

            public string? State { get; set; }

            public string Country { get; set; } = string.Empty;

            public string PhoneNumber { get; set; } = string.Empty;

            public string Email { get; set; } = string.Empty;

            public decimal OrderTotal { get; set; }

            public DateTime OrderPlaced { get; set; }
        }
    }

. Inclua a classe "OrderDetail.cs" abaixo na pasta "Models":

    namespace bethanysPieShop.Models
    {
        public class OrderDetail
        {
            public int OrderDetailId { get; set; }
            public int OrderId { get; set; }
            public int PieId { get; set; }
            public int Amount { get; set; }
            public decimal Price { get; set; }
            public Pie Pie { get; set; } = default!;
            public Order Order { get; set; } = default!;
        }
    }

. Inclua a interface "IOrderRepository" abaixo na pasta "Models":

    namespace bethanysPieShop.Models
    {
        public interface IOrderRepository
        {
            void CreateOrder(Order order);
        }
    }

. Insira as linhas abaixo na classe "Data/AppDbContext.cs"

    using bethanysPieShop.Models;
    using Microsoft.EntityFrameworkCore;

    namespace bethanysPieShop.Data
    {
        public class AppDbContext : DbContext
        {
            public DbSet<Category>? Categories { get; set; }
            public DbSet<Pie>? Pies { get; set; }
            public DbSet<Order> Orders { get; set; }                // Linha Inserida
            public DbSet<OrderDetail> OrderDetails { get; set; }    // Linha Inserida


            public DbSet<ShoppingCartItem>? ShoppingCartItems { get; set; }

            public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
            {
            }

            //            protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) 
            //                        => optionsBuilder.UseSqlite();
            protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            {
                optionsBuilder.UseSqlite();
                optionsBuilder.LogTo(Console.WriteLine);
            }


        }
    }

. Inclua a classe "OrderRepository.cs" abaixo na pasta "Models":

    using bethanysPieShop.Data;

    namespace bethanysPieShop.Models
    {
        public class OrderRepository : IOrderRepository
        {
            private readonly AppDbContext _bethanysPieShopDbContext;
            private readonly IShoppingCart _shoppingCart;

            public OrderRepository(AppDbContext bethanysPieShopDbContext, IShoppingCart shoppingCart)
            {
                _bethanysPieShopDbContext = bethanysPieShopDbContext;
                _shoppingCart = shoppingCart;
            }

            public void CreateOrder(Order order)
            {
                order.OrderPlaced = DateTime.Now;

                List<ShoppingCartItem>? shoppingCartItems = _shoppingCart.ShoppingCartItems;
                order.OrderTotal = _shoppingCart.GetShoppingCartTotal();

                order.OrderDetails = new List<OrderDetail>();

                foreach (ShoppingCartItem? shoppingCartItem in shoppingCartItems)
                {
                    var orderDetail = new OrderDetail
                    {
                        Amount = shoppingCartItem.Amount,
                        PieId = shoppingCartItem.Pie.PieId,
                        Price = shoppingCartItem.Pie.Price
                    };

                    order.OrderDetails.Add(orderDetail);
                }

                _bethanysPieShopDbContext.Orders.Add(order);

                _bethanysPieShopDbContext.SaveChanges();
            }
        }
    }

. Acesse a classe "Program.cs" e insira as linhas abaixo:

    ...
    var builder = WebApplication.CreateBuilder(args);

    builder.Services.AddScoped<ICategoryRepository, CategoryRepository>();      
    builder.Services.AddScoped<IPieRepository, PieRepository>();     
    builder.Services.AddScoped< IShoppingCart, ShoppingCart >( sp => ShoppingCart.GetCart( sp ) );          

    builder.Services.AddScoped<IOrderRepository, OrderRepository>();        // Linha inserida

    ...

. Execute o comando abaixo na pasta raiz do projeto:

    dotnet clean

    dotnet build

    dotnet ef migrations add [Nome da nova migration]

    dotnet ef database update

. Acesse o banco e verifique se as tabelas "Order" e "OrderDetail" foram criadas com sucesso.

. Crie a classe "OrderController" abaixo dentro da pasta "Controllers":

    using bethanysPieShop.Models;
    using Microsoft.AspNetCore.Mvc;

    namespace bethanysPieShop.Controllers
    {
        public class OrderController : Controller
        {
            private readonly IOrderRepository _orderRepository;
            private readonly IShoppingCart _shoppingCart;

            public OrderController(IOrderRepository orderRepository, IShoppingCart shoppingCart)
            {
                _orderRepository = orderRepository;
                _shoppingCart = shoppingCart;
            }

            public IActionResult Checkout()
            {
                return View();
            }
        }
    }

. Crie a View "Checkout.cshtml" abaixo dentro da pasta "Views/Order":

    @model Order

    <form asp-action="Checkout" method="post" role="form">
        <h3 class="my-5">
            You're just one step away from your delicious pies.
        </h3>

        <div asp-validation-summary="All" class="text-danger"></div>

        <div class="col-6">
            <div class="row g-2">
                <div class="col-12">
                    <label asp-for="FirstName" class="form-label"></label>
                    <input asp-for="FirstName" class="form-control" />
                    <span asp-validation-for="FirstName" class="text-danger"></span>
                </div>

                <div class="col-12">
                    <label asp-for="LastName" class="form-label"></label>
                    <input asp-for="LastName" class="form-control" />
                    <span asp-validation-for="LastName" class="text-danger"></span>
                </div>

                <div class="col-12">
                    <label asp-for="AddressLine1" class="form-label"></label>
                    <input asp-for="AddressLine1" class="form-control" />
                    <span asp-validation-for="AddressLine1" class="text-danger"></span>
                </div>

                <div class="col-12">
                    <label asp-for="AddressLine2" class="form-label"></label>
                    <input asp-for="AddressLine2" class="form-control" />
                    <span asp-validation-for="AddressLine2" class="text-danger"></span>
                </div>

                <div class="col-6">
                    <label asp-for="City" class="form-label"></label>
                    <input asp-for="City" class="form-control" />
                    <span asp-validation-for="City" class="text-danger"></span>
                </div>

                <div class="col-6">
                    <label asp-for="State" class="form-label"></label>
                    <input asp-for="State" class="form-control" />
                    <span asp-validation-for="State" class="text-danger"></span>
                </div>

                <div class="col-6">
                    <label asp-for="ZipCode" class="form-label"></label>
                    <input asp-for="ZipCode" class="form-control" />
                    <span asp-validation-for="ZipCode" class="text-danger"></span>
                </div>

                <div class="col-6">
                    <label asp-for="Country" class="form-label"></label>
                    <input asp-for="Country" class="form-control" />
                    <span asp-validation-for="Country" class="text-danger"></span>
                </div>

                <div class="col-12">
                    <label asp-for="Email" class="form-label"></label>
                    <input asp-for="Email" class="form-control" />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>

                <div class="col-12">
                    <label asp-for="PhoneNumber" class="form-label"></label>
                    <input asp-for="PhoneNumber" class="form-control" />
                    <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                </div>
            </div>

            <div class="mt-2">
                <div class="col-md-offset-2 col-md-5">
                    <input type="submit" class="btn btn-secondary" value="Complete order" />
                </div>
            </div>
        </div>
    </form>

. Insira as linhas abaixo na classe "Views/ShoppingCart/Index.cshtml":

    @model ShoppingCartViewModel

    <h3 class="my-5">
        Shopping cart
    </h3>


    <div class="row gx-3">
        <div class="col-8">
            @foreach (var line in Model.ShoppingCart.ShoppingCartItems)
            {
                <div class="card shopping-cart-card mb-2">
                    <div class="row">
                        <div class="col-md-4">
                            <img src="@line.Pie.ImageThumbnailUrl" class="img-fluid rounded-start p-2" alt="@line.Pie.Name">
                        </div>
                        <div class="col-md-8">
                            <div class="card-body">
                                <h5 class="card-text">@line.Amount x @line.Pie.Name</h5>
                                <div class="d-flex justify-content-between">
                                    <h6>@line.Pie.ShortDescription</h6>
                                    <h2>@line.Pie.Price.ToString("c")</h2>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="col-4">
            <div class="card shopping-cart-card p-3">
                <div class="row">
                    <h4 class="col">Total:</h4>
                    <h4 class="col text-end">@Model.ShoppingCartTotal.ToString("c")</h4>
                </div>
                <hr />
                <div class="text-center d-grid">

                    @*
                        Linhas abaixo inserida
                    *@

                    <a class="btn btn-secondary" 
                        asp-controller="Order" 
                        asp-action="Checkout">
                    <h4>Check out now!</h4></a>

                    @* Fim da inserção *@
                    
                </div>
            </div>
        </div>
    </div>

. Levante a aplicação, acione o "Add cart" e verifique dentro do carrinho se aparece o botão "CHECK OUT NOW".

    . A funcionalidade está incompleta, somente verifique se o botão "CHECK OUT NOW" apareceu. No próximo DEMO
        essa funcionalidade será completada.

. Insira os métodos abaixo na classe "OrderController.cs":

    ...
    [HttpPost]
    public IActionResult Checkout(Order order)
    {
        var items = _shoppingCart.GetShoppingCartItems();
        _shoppingCart.ShoppingCartItems = items;

        if (_shoppingCart.ShoppingCartItems.Count == 0)
        {
            ModelState.AddModelError("", "Your cart is empty, add some pies first");
        }

        if (ModelState.IsValid)
        {
            _orderRepository.CreateOrder(order);
            _shoppingCart.ClearCart();
            return RedirectToAction("CheckoutComplete");
        }
        return View(order);
    }

    public IActionResult CheckoutComplete()
    {
        ViewBag.CheckoutCompleteMessage = "Thanks for your order. You'll soon enjoy our delicious pies!";
        return View();
    }

    ...

. Crie a View "CheckoutComplete.cshtml" abaixo dentro da pasta "Views/Order":

    <h3 class="my-5">
        @ViewBag.CheckoutCompleteMessage
    </h3>

. Levante a aplicação, acione o "Add cart" e verifique dentro do carrinho se aparece o botão "CHECK OUT NOW".

    . Acione o botão "CHECK OUT NOW"

    . Inclua as informações da ordem e faça a gravação das informações.


. Altere a classe "Model" "Models/Order" como abaixo, colocando as annotations:

    using Microsoft.AspNetCore.Mvc.ModelBinding;
    using System.ComponentModel.DataAnnotations;

    namespace bethanysPieShop.Models
    {
        public class Order
        {
            [BindNever]
            public int OrderId { get; set; }

            public List<OrderDetail>? OrderDetails { get; set; }

            [Required(ErrorMessage = "Please enter your first name")]
            [Display(Name = "First name")]
            [StringLength(50)]
            public string FirstName { get; set; } = string.Empty;

            [Required(ErrorMessage = "Please enter your last name")]
            [Display(Name = "Last name")]
            [StringLength(50)]
            public string LastName { get; set; } = string.Empty;

            [Required(ErrorMessage = "Please enter your address")]
            [StringLength(100)]
            [Display(Name = "Address Line 1")]
            public string AddressLine1 { get; set; } = string.Empty;

            [Display(Name = "Address Line 2")]
            public string? AddressLine2 { get; set; }

            [Required(ErrorMessage = "Please enter your zip code")]
            [Display(Name = "Zip code")]
            [StringLength(10, MinimumLength = 4)]
            public string ZipCode { get; set; } = string.Empty;

            [Required(ErrorMessage = "Please enter your city")]
            [StringLength(50)]
            public string City { get; set; } = string.Empty;

            [Required( ErrorMessage = "Please enter your State")]
            [StringLength( 10, ErrorMessage="Length State must be between 2 and 10 digits", MinimumLength = 2)]
            public string? State { get; set; }

            [Required(ErrorMessage = "Please enter your country")]
            [StringLength(50)]
            public string Country { get; set; } = string.Empty;

            [Required(ErrorMessage = "Please enter your phone number")]
            [StringLength(25)]
            [DataType(DataType.PhoneNumber)]
            [Display(Name = "Phone number")]
            public string PhoneNumber { get; set; } = string.Empty;

            [Required]
            [StringLength(50)]
            [DataType(DataType.EmailAddress)]
            [RegularExpression(@"(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|""(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*"")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])",
                ErrorMessage = "The email address is not entered in a correct format")]
            public string Email { get; set; } = string.Empty;

            [BindNever]
            public decimal OrderTotal { get; set; }

            [BindNever]
            public DateTime OrderPlaced { get; set; }
        }
    }

. Insira a linha abaixo na view "Views/Order/Checkout.cshtml":

    <form asp-action="Checkout" method="post" role="form">
        <h3 class="my-5">
            You're just one step away from your delicious pies.
        </h3>

        <div asp-validation-summary="All" class="text-danger"></div>                @* linha inserida *@

        <div class="col-6">
            <div class="col-12">
                <label asp-for="FirstName" class="form-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>    @* linha inserida *@
            </div>

            <div class="col-12">
                <label asp-for="LastName" class="form-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>     @* linha inserida *@
            </div>

            <div class="col-12">
                <label asp-for="AddressLine1" class="form-label"></label>
                <input asp-for="AddressLine1" class="form-control" />
                <span asp-validation-for="AddressLine1" class="text-danger"></span> @* linha inserida *@
            </div>

            <div class="col-12">
                <label asp-for="AddressLine2" class="form-label"></label>
                <input asp-for="AddressLine2" class="form-control" />
                <span asp-validation-for="AddressLine2" class="text-danger"></span> @* linha inserida *@
            </div>

            <div class="col-6">
                <label asp-for="City" class="form-label"></label>
                <input asp-for="City" class="form-control" />
                <span asp-validation-for="City" class="text-danger"></span>         @* linha inserida *@
            </div>

            <div class="col-6">
                <label asp-for="State" class="form-label"></label>
                <input asp-for="State" class="form-control" />
                <span asp-validation-for="State" class="text-danger"></span>        @* linha inserida *@
            </div>

            <div class="col-6">
                <label asp-for="ZipCode" class="form-label"></label>
                <input asp-for="ZipCode" class="form-control" />
                <span asp-validation-for="ZipCode" class="text-danger"></span>      @* linha inserida *@
            </div>

            <div class="col-6">
                <label asp-for="Country" class="form-label"></label>
                <input asp-for="Country" class="form-control" />
                <span asp-validation-for="Country" class="text-danger"></span>      @* linha inserida *@
            </div>

            <div class="col-12">
                <label asp-for="Email" class="form-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>        @* linha inserida *@
            </div>

            <div class="col-12">
                <label asp-for="PhoneNumber" class="form-label"></label>
                <input asp-for="PhoneNumber" class="form-control" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>  @* linha inserida *@
            </div>
        </div>
    </form>

. Levante a aplicação e verifique se as v alidações estão funcionando na parte do "Checkout"

. Validação feita através do JQuery:

    . Instale a biblioteca JQuery abaixo no projeto:

        jquery-validate@1.19.4

        . No visual studio:

            . Clique com o botão direito do mouse sobre a raiz do projeto
            . Escolha a opção: Add / Client Side Library
            . No item "Library" digite "jquery-validate@1.19.4"
            . Escolha todas as opção para instalação da biblioteca

        . No VSCode:

            . Acesse a URL abaixo e faça o download:

                https://sourceforge.net/projects/jquery-validation.mirror/files/1.19.4/jquery-validation-1.19.4.zip/download

            . Crie a pasta "wwwroot/lib/jquery-validate" no projeto

            . Copie a pasta "/dist" do arquivo baixado para dentro da pasta do projeto "wwwroot/lib/jquery-validate"

    (35.00)
. Instale a biblioteca JQuery abaixo no projeto:

    jquery-validation-unobtrusive@3.2.12

    . Execute o comando abaixo:

        npm install jquery-validation-unobtrusive@3.2.12

    . Crie a pasta "wwwroot/lib/jquery-validation-unobtrusive" no projeto

    . Copie a pasta "/dist" do arquivo baixado para dentro da pasta do projeto "wwwroot/lib/query-validation-unobtrusive"

. Acesse o arquivo "Views/Shared/_Layout.cshtml" e implemente as linhas abaixo:

    <!DOCTYPE html>

    <html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title>Bethany's Pie Shop</title>
        <link href='https://fonts.googleapis.com/css?family=Work+Sans' rel='stylesheet' type='text/css'>
        <script src="~/lib/jquery/dist/jquery.js"></script>
        <script src="~/lib/jquery-validate/jquery.validate.js"></script>                                @* linha inserida *@
        <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>      @* linha inserida *@
        <script src="~/lib/bootstrap/js/bootstrap.js"></script>
        <link href="~/css/site.css" rel="stylesheet" />
        <base href="/" />
    </head>
    <body>
        ...
    </body>
    </html>

. Levante a aplicação e verifique se as v alidações estão funcionando na parte do "Checkout"
