Tutorial ASP.NET MVC, EF, MySQL e Datatables JQuery
---------------------------------------------------

1. Instalando o Docker

    . No caso do windows, acesse a URL abaixo e baixe o instalador:

        https://store.docker.com/editions/community/docker-ce-desktop-windows

    . Utilizar a versão Community Edition (CE)

    . No caso do Linux execute os comandos abaixo no prompt no terminal:

        . A URL abaixo tem os passos atualizado para instalação do Docker:

            https://docs.docker.com/engine/install/ubuntu/

        . Instalação Atualizada

            sudo apt-get update
            sudo apt-get install \
                ca-certificates \
                curl \
                gnupg \
                lsb-release

            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

            echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            sudo apt-get update
            sudo apt-get install docker-ce docker-ce-cli containerd.io
            sudo docker --version

            sudo groupadd docker
            sudo gpasswd -a <usuario> docker
            sudo chown "$USER":"$USER" /var/run/docker.sock -R
            sudo service docker restart

            docker --version


2. Crie o container do mysql:

    # docker run -d --name mysqldb -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 mysql:5.7 
    docker run -d --name mysqldb -e MYSQL_ROOT_PASSWORD=root -p 3306:3306  mysql:8.0 

    # Ao executar o comando abaixo, entraremos na linha de comando do container. Digite o comando abaixo:
    #
    #   mysql -u root -p
    #
    # Informe a senha "root"
    #
    #       create database desenv;
    #
    docker container exec -it mysql bash



3. Instalando o .NET Core SDK

	wget https://dot.net/v1/dotnet-install.sh

	chmod +x dotnet-install.sh

	./dotnet-install.sh -c 3.1
	./dotnet-install.sh -c 5.0
	./dotnet-install.sh -c 6.0
	./dotnet-install.sh -c 8.0
	
    # Se o bash shell for o padrão do linux execute as duas linha abaixo
    echo 'export PATH="/home/$USER/.dotnet:/home/$USER/.dotnet/tools:$PATH"' >> ~/.bashrc

	source ~/.bashrc

    # Se o zsh shell for o padrão do linux execute as duas linha abaixo
    echo 'export PATH="/home/$USER/.dotnet:/home/$USER/.dotnet/tools:$PATH"' >> ~/.zshrc

	source ~/.zshrc

    # Caso for o Fish Shell, insira na primeira linha do arquivo "~/.config/fish/config.fish" a linha abaixo
    set -x PATH $PATH /home/$USER/.dotnet /home/$USER/.dotnet/tools

	dotnet --info
	dotnet --version
	dotnet --list-runtimes
	dotnet --list-sdks

4. Instalando o VS Code

    . Instalação das extensões do VSCode

            C# 
            C# Extensions
            C# XML Documentation Comments
            vscode-icons (Opcional)
            Docker

        . Atalhos:

            Ctrl + K + D ou Shit + Alt + F:             Identa todo o seu código automaticamente;
            Ctrl + K + C:                               comenta um bloco de linhas;
            Ctrl + /                                    Comenta a linha
            Ctrl + K + U:                               descomenta um bloco de linhas;
            Alt + Left Arrow:                           durante a programação, volta um método que você estava navegando;
            Alt + Right Arrow:                          durante a programação, avança um método que você estava navegando;
            Ctrl + .:                                   implementa o método/classe inexistente que você acabou de escrever;
            Ctrl + M + O:                               esconde todas as regions da classe atual;
            Ctrl + Shift + B:                           compila todos os projetos;
            F5:                                         manda depurar um projeto;
            Ctrl + F5:                                  manda executar um projeto;
            F10:                                        durante a depuração, avança uma linha;
            F11:                                        durante a depuração, avança uma linha entrando nos detalhes da mesma;


    . Configurar Visual Studio Code para .NETCore

        . Acesse File / Preferences / Settings

        . Digite C#

        . Acesse "C# Configuration / CSharp Format Enabled" e habilite a configuração

        . Digite "Format on save" e habilite a configuração

        . Digite "Final" e habilite a configuração "Files: Insert final newline" e habilite a configuração


5. Crie a pasta da "Solution":

    mkdir MvcDatatable

    dotnet new sln -n MvcDatatable

    dotnet new mvc -o ./src/MvcDatatable.Web -n MvcDatatable.Web -f net8.0
    dotnet sln add ./src/MvcDatatable.Web/

6. Dentro da pasta do projeto Web adicione as bibliotecas necessárias para trabalharmos no projeto:

    cd MvcDatatable/src/MvcDatatable

    dotnet add package Microsoft.EntityFrameworkCore --version 8.0.6
    dotnet add package Microsoft.EntityFrameworkCore.Design --version 8.0.6
    dotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.6
    dotnet add package Pomelo.EntityFrameworkCore.MySql --version 8.0.2

    dotnet restore

7. Execute o projeto para ver se foi bem sucedido a contrução:

    cd ~/workspace-dotnet/MvcDatatable

    dotnet run --project ./src/MvcDatatable.Web 

8. Faça a alteração abaixo na classe do projeto "./src/MvcDatatable.Web/MvcDatatable.Web.csproj" para eliminar 
    o aviso "Null-Value":

    <Project Sdk="Microsoft.NET.Sdk.Web">

        <PropertyGroup>
            <TargetFramework>net8.0</TargetFramework>
            <Nullable>disable</Nullable>
            <ImplicitUsings>enable</ImplicitUsings>
                                |
                                +---> Altere para "disable"
        </PropertyGroup>

        ...
    </Project>


9. Acesse os arquivos "appsettings.Development.json" e insira a linha abaixo:


    // IMPORTANTE: Caso ocorra algum problema na identificação do servidor "mysql" como localhost, use o fisico do container.
    //              Utilize o comando "docker exec mysqldb hostname -I" para encontrar o IP do container
    //              ou
    //             Execute o comando:   docker container inspect mysqldb |grep -i "IPAddress\|Gateway"
    //
    //              Outra dica importante: Caso ocorra o erro "Authentication method 'caching_sha2_password' failed.", acrescente aos
    //              parâmetros de autenticação do "DotNetCoreMySQLAppConnection" o item "; AllowPublicKeyRetrieval=True". Isto ocorre 
    //              ao utilizar o container docker "MySQL:8.XX"
    //
    // IMPORTANTE: As configurações de "Development" existentes nos "Properties/launchSetting.json" não está apontando
                    para o arquivo "appsetings.Development.json", talvez isto ocorra devido ao comando "dotnet ef migrations..."
                    enxergar somente o arquivo "appsetings.json"
    {
        ...,
        "ConnectionStrings": {
            "DefaultConnection": "server=localhost; port=3306; database=clientedb; user=root; password=root; Persist Security Info=false; Connect Timeout=300;SSL Mode=None"
        },
    }

10. Crie a pasta "Data" na raiz do projeto e crie a classe "ApplicationDbContext.cs" como abaixo:

    using Microsoft.EntityFrameworkCore;

    namespace MvcDatatable.Web.Data;

    public class ApplicationDbContext : DbContext
    {

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        public DbSet<Cliente> Clientes{ get; set; }
    }


11. Adicione as linhas abaixo na classe "Program.cs":

    using Microsoft.EntityFrameworkCore;                                                // Linha inserida

    ...
    var builder = WebApplication.CreateBuilder(args);

    var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");  // Linha inserida

    builder.Services.AddDbContext<ApplicationDbContext>(options =>                          // Linha inserida
        options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString)));
    ...

12. Crie o arquivo "GlobalUsings.cs" na raiz do projeto "MvcDatatable.Web" com o conteúdo abaixo:

    global using System.Component.Model.DataAnnotations;
    global using Microsoft.EntityFrameworkCore;
    global using Datatable.Web.Model;
    global using Datatable.Web.Data;

13. Crie a pasta "Utils" na raiz do projeto

14. Crie a interface "AuditEntity.cs" na pasta "Utils" como abaixo:

    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations.Schema;

    namespace MvcDatatable.Web.Utils;

    public abstract class AuditEntity
    {

        [Column("dataInclusao", TypeName = "DATETIME")]
        // [DefaultValue("current_timestamp")]
        // [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public DateTime? DataInclusao { get; set; }


        [Column("dataAlteracao", TypeName = "DATETIME")]
        public DateTime? DataAlteracao { get; set; }
    }

15. Crie as classes abaixo dentro da pasta "Models":

    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Threading.Tasks;

    namespace MvcDatatable.Models;

    [Table("cliente")]
    public class Cliente: AudittEntity
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column("codigo")]
        public int codigo { get; set; }

        [Required(ErrorMessage = "Este campo é obrigatorio")]
        [Column("cpf", TypeName = "VARCHAR(15)")]
        public string Cpf { get; set; }

        [Required(ErrorMessage = "Este campo é obrigatorio")]
        [MaxLength(150, ErrorMessage = "Este campo deve ter entre 5 a 150 caracateres")]
        [MinLength(5, ErrorMessage = "Este campo dever ter entre 5 a 150 caracateres")]
        [Column("nome", TypeName = "VARCHAR(100)")]
        public string Nome { get; set; }

        [Required(ErrorMessage = "Este campo é obrigatorio")]
        [Column("dataNascimento", TypeName = "DATE")]
        public DateTime? DataNascimento { get; set; }

        [Column("rg", TypeName = "VARCHAR(11)")]
        public string rg { get; set; }

        [Required(ErrorMessage = "Este campo é obrigatorio")]
        [Column("sexo", TypeName = "CHAR(1)")]
        public string Sexo { get; set; }

        [Required(ErrorMessage = "Este campo é obrigatorio")]
        [Column("estadoCivil", TypeName = "VARCHAR(10)")]
        public string EstadoCivil { get; set; }

        [Column("pai", TypeName = "VARCHAR(100)")]
        public string Pai { get; set; }

        [Column("mae", TypeName = "VARCHAR(100)")]
        public string Mae { get; set; }

        [Required(ErrorMessage = "Este campo é obrigatorio")]
        [MaxLength(250, ErrorMessage = "Este campo deve ter entre 5 a 150 caracateres")]
        [MinLength(5, ErrorMessage = "Este campo deve ter entre 5 a 150 caracateres")]
        [Column("endereco", TypeName = "VARCHAR(100)")]
        public string Endereco { get; set; }

        [Required(ErrorMessage = "Este campo é obrigatorio")]
        [MaxLength(100, ErrorMessage = "Este campo deve ter entre 5 a 100 caracateres")]
        [MinLength(5, ErrorMessage = "Este campo deve ter entre 5 a 100 caracateres")]
        [Column("cidade", TypeName = "VARCHAR(50)")]
        public string Cidade { get; set; }

        [Required(ErrorMessage = "Este campo é obrigatorio")]
        [MaxLength(2, ErrorMessage = "Este campo deve ter 2 caracateres")]
        [MinLength(2, ErrorMessage = "Este campo deve ter 2caracateres")]
        [Column("estado", TypeName = "CHAR(2)")]
        public string Estado { get; set; }

        [Required(ErrorMessage = "Este campo é obrigatorio")]
        [Column("cep", TypeName = "CHAR(8)")]
        public string Cep { get; set; }

        [Required(ErrorMessage = "Este campo é obrigatorio")]
        [Column("telefone", TypeName = "VARCHAR(20)")]
        public string Telefone { get; set; }
    }



