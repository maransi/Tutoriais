https://github.com/balta-io/api-aspnet-5-ef-core-sqlite

Desenvolvimento de API com ASP.NET, EF Core e SQLite
----------------------------------------------------

. Acesse a pasta de projetos e digite o comando abaixo:

    dotnet new webapi -o Contrato -n contrato -f net5.0

. Acesse a pasta do projeto criado com o VSCode e execute os comandos abaixo:

    dotnet add package Microsoft.EntityFrameworkCore --version 5.0.9        

    dotnet add package Microsoft.EntityFrameworkCore.Sqlite --version 5.0.9

    # Se for usar o banco de dados SQL Server execute a linha abaixo
    #
    # dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 5.0.9

    dotnet add package Microsoft.EntityFrameworkCore.Design --version 5.0.9

    # Execute a linha abaixo caso o "dotnet-ef" não existir no ambiente
    dotnet tool install --global dotnet-ef --version 5.0.17

. Apague as classes abaixo:

    WeatherForecast.cs
    Controllers/WeatherForecastController.cs

. Crie a pasta "Models" na raiz do projeto.

. Crie as classes abaixo:

    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Threading.Tasks;

    namespace contrato.Models
    {

        [Table("cliente")]
        public class Cliente
        {
            [Key]
            [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
            [Column("codigo")]
            public int codigo { get; set; }

            [Required(ErrorMessage = "Este campo é obrigatorio")]
            [Column("cpf", TypeName ="VARCHAR(15)")]
            public string cpf { get; set; }

            [Required(ErrorMessage = "Este campo é obrigatorio")]
            [MaxLength(150, ErrorMessage = "Este campo deve ter entre 5 a 150 caracateres")]
            [MinLength(5, ErrorMessage = "Este campo dever ter entre 5 a 150 caracateres")]
            [Column("nome", TypeName ="VARCHAR(100)")]
            public string nome { get; set; }

            [Required(ErrorMessage = "Este campo é obrigatorio")]
            [Column("dataNascimento", TypeName ="DATE")]
            public DateTime? dataNascimento { get; set; }

            [Column("rg", TypeName ="VARCHAR(11)")]
            public string rg { get; set; }

            [Required(ErrorMessage = "Este campo é obrigatorio")]
            [Column("sexo", TypeName ="CHAR(1)")]
            public string sexo { get; set; }

            [Required(ErrorMessage = "Este campo é obrigatorio")]
            [Column("estadoCivil", TypeName ="VARCHAR(10)")]
            public string estadoCivil { get; set; }

            [Column("pai", TypeName ="VARCHAR(100)")]
            public string pai { get; set; }

            [Column("mae", TypeName ="VARCHAR(100)")]
            public string mae { get; set; }

            [Required(ErrorMessage = "Este campo é obrigatorio")]
            [MaxLength(250, ErrorMessage = "Este campo deve ter entre 5 a 150 caracateres")]
            [MinLength(5, ErrorMessage = "Este campo deve ter entre 5 a 150 caracateres")]
            [Column("endereco", TypeName ="VARCHAR(100)")]
            public string endereco { get; set; }

            [Required(ErrorMessage = "Este campo é obrigatorio")]
            [MaxLength(100, ErrorMessage = "Este campo deve ter entre 5 a 100 caracateres")]
            [MinLength(5, ErrorMessage = "Este campo deve ter entre 5 a 100 caracateres")]
            [Column("cidade", TypeName ="VARCHAR(50)")]
            public string cidade { get; set; }

            [Required(ErrorMessage = "Este campo é obrigatorio")]
            [MaxLength(2, ErrorMessage = "Este campo deve ter 2 caracateres")]
            [MinLength(2, ErrorMessage = "Este campo deve ter 2caracateres")]
            [Column("estado", TypeName ="CHAR(2)")]
            public string estado { get; set; }

            [Required(ErrorMessage = "Este campo é obrigatorio")]
            [Column("cep", TypeName ="CHAR(8)")]
            public string cep { get; set; }

            [Required(ErrorMessage = "Este campo é obrigatorio")]
            [Column("telefone", TypeName ="VARCHAR(20)")]
            public string telefone { get; set; }

            [Column("dataInclusao", TypeName ="DATE")]
            public DateTime dataInclusao { get; set; } = new DateTime();
        }
    }

. Acesse os arquivos "appsettings.json" e "appsettings.Development.json" e insira a linha abaixo:

    {
        "ConnectionStrings": {              
            "DefaultConnection": "DataSource=app.db;Cache=Shared"
        },
        ...
    }

    . IMPORTANTE: As configurações de "Development" existentes nos "Properties/launchSetting.json" não está apontando
                    para o arquivo "appsetings.Development.json", talvez isto ocorra devido ao comando "dotnet ef migrations..."
                    enxergar somente o arquivo "appsetings.json"

. Acrescente a linha abaixo no arquivo "Startup.cs":

    ...
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
            var connectionStrings = Configuration.GetConnectionString("DefaultConnection");     // Linha inserida

            services.AddDbContext<AppDbContext>(options =>                                      // Linha inserida
                options.UseSqlite(connectionStrings));
        }
        ...
    }

. Crie a pasta "Data" dentro da raiz do projeto e dentro dela crie a classe abaixo:

    using System;
    using contrato.Models;
    using Microsoft.EntityFrameworkCore;

    namespace contrato.Data
    {
        public class AppDbContext: DbContext
        {
            public AppDbContext(DbContextOptions<AppDbContext> options ) : base(options)
            {
            }

            protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) 
                        => optionsBuilder.UseSqlite();

            public DbSet<Cliente> Clientes { get; set; }
        }
    }

. Na raiz do projeto execute os comandos abaixo:

    dotnet clean

    dotnet build

    dotnet ef migrations add InitialCreation

    dotnet ef database update

. Atualize a estrutura do projeto, verifique se o arquivo do SqLite "app.db" foi criado com sucesso,
    instale alguma extensão do SqLite no VSCode para executar instruções DMLs e faça a consulta da 
    estrutura do banco nele.

. Crie a pasta "ViewModels" e insira as classes abaixo :

    . Classe "ClienteViewModel", responsável por receber os parâmetros vindos do corpo da chamada para 
        dentro da assinatura do método da rota:

        namespace contrato.ViewModels
        {
            public class ClienteViewModel
            {
                public string cpf { get; set; }
                public string nome { get; set; }
            }
        }

    . Classe "CreateClienteViewModel"responsável por receber os parâmetros vindos do corpo da chamada para 
        dentro da assinatura do método da rota; preparada para ser utilizada na validação do model:

        using System;
        using System.ComponentModel.DataAnnotations;

        namespace contrato.ViewModels
        {
            public class CreateClienteViewModel
            {
                [Required(ErrorMessage = "Este campo é obrigatorio")]
                public string cpf { get; set; }

                [Required(ErrorMessage = "Este campo é obrigatorio")]
                [MaxLength(150, ErrorMessage = "Este campo deve ter entre 5 a 150 caracateres")]
                [MinLength(5, ErrorMessage = "Este campo dever ter entre 5 a 150 caracateres")]
                public string nome { get; set; }

                [Required(ErrorMessage = "Este campo é obrigatorio")]
                public DateTime? dataNascimento { get; set; }

                public string rg { get; set; }

                [Required(ErrorMessage = "Este campo é obrigatorio")]
                public string sexo { get; set; }

                [Required(ErrorMessage = "Este campo é obrigatorio")]
                public string estadoCivil { get; set; }

                public string pai { get; set; }

                public string mae { get; set; }

                [Required(ErrorMessage = "Este campo é obrigatorio")]
                [MaxLength(250, ErrorMessage = "Este campo deve ter entre 5 a 150 caracateres")]
                [MinLength(5, ErrorMessage = "Este campo deve ter entre 5 a 150 caracateres")]
                public string endereco { get; set; }

                [Required(ErrorMessage = "Este campo é obrigatorio")]
                [MaxLength(100, ErrorMessage = "Este campo deve ter entre 5 a 100 caracateres")]
                [MinLength(5, ErrorMessage = "Este campo deve ter entre 5 a 100 caracateres")]
                public string cidade { get; set; }

                [Required(ErrorMessage = "Este campo é obrigatorio")]
                [MaxLength(2, ErrorMessage = "Este campo deve ter 2 caracateres")]
                [MinLength(2, ErrorMessage = "Este campo deve ter 2caracateres")]
                public string estado { get; set; }

                [Required(ErrorMessage = "Este campo é obrigatorio")]
                public string cep { get; set; }

                [Required(ErrorMessage = "Este campo é obrigatorio")]
                public string telefone { get; set; }

                public DateTime dataInclusao { get; set; } = new DateTime();
            }
        }

    . Classe "ResultViewModel", responsável por padronizar e deixar mais amigável as mensagens de erro:

        using System.Collections.Generic;

        namespace contrato.ViewModels
        {
            public class ResultViewModel<T>
            {
                public ResultViewModel(T data, List<string> errors)
                {
                    Data = data;
                    Errors = errors;
                }

                public ResultViewModel(T data)
                {
                    Data = data;
                }

                public ResultViewModel(List<string> errors)
                {
                    Errors = errors;
                }

                public ResultViewModel(string error)
                {
                    Errors.Add(error);
                }

                public T Data { get; private set; }
                public List<string> Errors { get; private set; } = new();
            }
        }

. Crie a pasta "Extensions" e inclua a classe abaixo:

    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.AspNetCore.Mvc.ModelBinding;

    namespace contrato.Extensions
    {
        public static class ModelStateExtension
        {
            public static List<string> GetErrors(this ModelStateDictionary modelState)
            {
                var result = new List<string>();
                foreach (var item in modelState.Values)
                    result.AddRange(item.Errors.Select(error => error.ErrorMessage));

                return result;
            }
        }
    }

. Acesse a classe "Startup.cs" e faça as alterações abaixo:

    ...
    public void ConfigureServices(IServiceCollection services)
    {
        ...

        // Ao fazer a configuração ".ConfigureApiBehaviorOptions", somos obrigados validar manualmente dentro dos controllers os models através 
        // do método "ModelState.IsValid".
        // Esta configuração trabalhará em conjunto classes "ResultViewModel" e "ModelStateExtension".
        //
        // Exemplo:     return BadRequest(new ResultViewModel<Category>(ModelState.GetErrors())); 
        //
        services.AddControllers()
                .ConfigureApiBehaviorOptions(options =>        
                                            {                                                       
                                                options.SuppressModelStateInvalidFilter = true;     
                                            });            
        ...
    }
    ...

. Acesse a pasta "Controllers"  crie a classe abaixo:

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using contrato.Data;
    using contrato.Extensions;
    using contrato.Models;
    using contrato.ViewModels;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.EntityFrameworkCore;

    namespace contrato.Controllers
    {
        [ApiController]
        [Route("[controller]")]
        public class ClienteController : ControllerBase
        {
            /*          // Devido ao [FromServices] deixou de ser necessário este trecho de código
                        private AppDataContext _context;

                        public ClienteController( AppDataContext context )
                        {
                            _context = context;
                        }
            */

            // A rota "v1" será o controle de versão
            [HttpGet("v1")]
            public async Task<ActionResult<List<Cliente>>> GetAsync([FromServices] AppDbContext context)
            {
                try
                {
                    var clientes = await context.Clientes
                                                .AsNoTracking()
                                                .ToListAsync();

                    return Ok(new ResultViewModel<List<Cliente>>(clientes));
                }
                catch (Exception ex)
                {
                    return StatusCode(500, new ResultViewModel<List<Cliente>>($"Ocorreu o seguinte erro [ {ex.Message} ]"));
                }

            }

            [HttpPost("v1")]
            public async Task<ActionResult<Cliente>> PostAsync([FromServices] AppDbContext context,
                                                                    [FromBody] CreateClienteViewModel model)
            {
                if (!ModelState.IsValid)
                    return BadRequest(new ResultViewModel<Cliente>(ModelState.GetErrors()));

                var cliente = new Cliente
                {
                    cpf = model.cpf,
                    nome = model.nome,
                    dataNascimento = model.dataNascimento,
                    rg = model.rg,
                    sexo = model.sexo,
                    estadoCivil = model.estadoCivil,
                    pai = model.pai,
                    mae = model.mae,
                    endereco = model.endereco,
                    cidade = model.cidade,
                    estado = model.estado,
                    cep = model.cep,
                    telefone = model.telefone,
                    dataInclusao = DateTime.Now
                };

                try
                {
                    await context.Clientes.AddAsync(cliente);
                    await context.SaveChangesAsync();

                    var createdResource = new { Id = 1, Version = "1.0" };

                    // Uri uri = new Uri($"https://localhost:5001/cliente/v1/cpf/{model.cpf}");

                    // return Created(uri, model);
                    return Created($"cliente/v1/cpf/{model.cpf}", new ResultViewModel<Cliente>(cliente));
                }
                catch (Exception ex)
                {
                    return StatusCode(500, new ResultViewModel<Cliente>($"Ocorreu o seguinte erro [ {ex.Message} ]"));  // Linha alterada
                }

                // https://ochzhen.com/blog/created-createdataction-createdatroute-methods-explained-aspnet-core
                // https://www.macoratti.net/19/06/aspnc_3dwebapi1.htm
                // https://code-maze.com/net-core-web-development-part6/
            }

            [HttpGet("v1/cpf/{cpf:string}")]
            // [HttpGet("{cpf:regex(^\\d{{3}}.\\d{{3}}.\\d{{3}}-\\d{{2}}$)}")]
            public async Task<ActionResult<Cliente>> GetByCpf([FromServices] AppDbContext context,
                                                                [FromRoute] string cpf)
            {

                try
                {
                    var cliente = await context.Clientes
                                            .AsNoTracking()
                                            .FirstOrDefaultAsync(x => x.cpf == cpf);

                    return cliente == null ?
                                    NotFound(new { Id = 1, error = $"Não foi encontrado cliente com o cpf {cpf}" }) :
                                    Ok(new ResultViewModel<Cliente>(cliente));
                }
                catch (Exception ex)
                {
                    return StatusCode(500, new ResultViewModel<List<Cliente>>($"Ocorreu o seguinte erro [ {ex.Message} ]"));
                }

            }

            [HttpGet("v1/nome/{nome:string}")]
            public async Task<ActionResult<List<Cliente>>> GetByName([FromServices] AppDbContext context,
                                                                        [FromBody] ClienteViewModel viewModel,
                                                                        [FromRoute] string nome)
            {
                var clientes = await context.Clientes
                                    .AsNoTracking()
                                    .Where(x => x.nome.ToUpper().Contains(viewModel.nome.ToUpper()))
                                    .ToListAsync();
                // .FirstOrDefaultAsync( x => x.nome.Contains( viewModel.nome ) );

                return clientes == null ?
                                NotFound(new ResultViewModel<Cliente>("Cliente não encontrado")) :
                                Ok(new ResultViewModel<List<Cliente>>(clientes));
            }
            [HttpPut("v1/{cpf:string}")]
            public async Task<ActionResult<Cliente>> Put([FromServices] AppDbContext context,
                                                            [FromBody] CreateClienteViewModel model,
                                                            [FromRoute] string cpf)
            {
                if (!ModelState.IsValid)
                    return BadRequest(new ResultViewModel<Cliente>(ModelState.GetErrors()));

                try
                {
                    var cliente = await context.Clientes
                                            .AsNoTracking()
                                            .FirstOrDefaultAsync(x => x.cpf == cpf);

                    if (cliente == null)
                        return NotFound(new ResultViewModel<Cliente>("Cliente não encontrado"));


                    cliente.cpf = model.cpf;
                    cliente.nome = model.nome;
                    cliente.dataNascimento = model.dataNascimento;
                    cliente.rg = model.rg;
                    cliente.sexo = model.sexo;
                    cliente.estadoCivil = model.estadoCivil;
                    cliente.pai = model.pai;
                    cliente.mae = model.mae;
                    cliente.endereco = model.endereco;
                    cliente.cidade = model.cidade;
                    cliente.estado = model.estado;
                    cliente.cep = model.cep;
                    cliente.telefone = model.telefone;
                    cliente.dataInclusao = DateTime.Now;

                    context.Clientes.Update(cliente);
                    await context.SaveChangesAsync();

                    return StatusCode(201, cliente);
                }
                catch (Exception ex)
                {
                    return BadRequest(new ResultViewModel<Cliente>(ex.Message));
                }
            }

            [HttpDelete("v1/{cpf:string}")]
            public async Task<ActionResult> Delete([FromServices] AppDbContext context,
                                        string cpf)
            {
                try
                {
                    var cliente = context.Clientes
                                    .AsNoTracking()
                                    .Where(x => x.cpf == cpf)
                                    .FirstOrDefault();

                    context.Clientes.Remove(cliente);

                    await context.SaveChangesAsync();

                    return StatusCode(204, new ResultViewModel<Cliente>("Cliente eliminado com sucesso"));
                }
                catch (Exception ex)
                {
                    return BadRequest(new ResultViewModel<Cliente>(ex.Message));
                }
            }
        }
    }

    . Acesse a aula "Aula 36.  Padronizando erros" do curso "Fundamentos ASP.NET 6" e faça as 
        configurações para deixar a validação manual dentro dos controllers os models através 
        do método "ModelState.IsValid":

            ...
            if (!ModelState.IsValid)                        
                return BadRequest(new ResultViewModel<Category>(ModelState.GetErrors()));
            ...


. Execute a aplicacao com o comando abaixo:

    dotnet build

    dotnet watch run

. Acesse o Postman e execute as URLs com os parâmetros abaixo:

    Method: POST
    URL: https://localhost:5001/cliente/v1
    Body.raw: 
                {
                    "cpf": "018.020.098-41",
                    "nome": "MARCIO VENEZIANO",
                    "dataNascimento": "1960-08-11T00:00:00",
                    "rg": "298655913",
                    "sexo": "M",
                    "estadoCivil": "OUTROS",
                    "pai": "ARTHUR VENEZIANO",
                    "mae": "BENEDITA DE OLIVEIRA",
                    "endereco": "R TAMBAU ",
                    "cidade": "GUARUJA",
                    "estado": "SP",
                    "cep": "11451170",
                    "telefone": "13 30174206"
                }    
    JSON:   true

    Method: GET
    URL: https://localhost:5001/cliente/v1
    Body.none

    Method: GET
    URL: https://localhost:5001/cliente/v1/cpf/049.045.238-81
    Body.None: True

    Method: GET
    URL: https://localhost:5001/cliente/v1/cpf
    Body.raw: { "cpf": "049.045.238-81"}

    Method: GET
    URL: https://localhost:5001/cliente/v1/nome
    Body.raw: { "nome": "MARCO" }

    Method: PUT
    URL: https://localhost:5001/cliente/v1
    Body.raw:     {
                    "codigo": "317282",
                    "cpf": "106.523.608-60",
                    "nome": "MARCO A DA SILVA",
                    "dataNascimento": "1966-10-17T00:00:00",
                    "rg": "16531421",
                    "sexo": "M",
                    "estadoCivil": "CASADO",
                    "pai": "LOURIVAL MARINHO SILVA",
                    "mae": "BENEDITA ABRANTES SILVA",
                    "endereco": "R CARIOBA 360 ",
                    "cidade": "SÃO PAULO",
                    "estado": "SP",
                    "cep": "02423100",
                    "telefone": "11 9 8336-1336"
                }

    Method: DELETE
    URL: https://localhost:5001/v1/clientes/106.523.608-58
    Body.None: true



Adicionando Paginação
---------------------

. Altere o método "GetAsync" como abaixo:

    [HttpGet("v1")]                                 
    public async Task<ActionResult<List<Cliente>>> GetAsync([FromServices] AppDataContext context,
                                                            [FromQuery] int page = 0,               // Linha inserida
                                                            [FromQuery] int pageSize = 25)          // Linha inserida
    {
        try
        {
            var count = await context.Clientes.AsNoTracking().CountAsync();    // Linha inserida

            var clientes = await context.Clientes                                                       // Linha alterada
                                        .AsNoTracking()
                                        .Skip( page * pageSize )
                                        .Take( pageSize )
                                        .OrderByDescending( x => x. cpf )
                                        .ToListAsync();

            return Ok( new ResultViewModel<dynamic>( new 
                                                    {
                                                        totalItem = count,
                                                        toalPage = Floor( count / pageSize ),
                                                        page,
                                                        pageSize,
                                                        clientes
                                                    });
        } catch
            {
                return StatusCode(500, new ResultViewModel<List<Category>>($"Ocorreu o seguinte erro [ {ex.message} ]"));
            }

    }

. Acesse o Postman e execute a rota abaixo:

    url: http://localhost:[porta]/cliente/v1
    method: GET

    . Vira 25 registros por página, que é o default do "pageSize"

. Acesse o Postman e execute a rota abaixo e vá executando modificando o número da página ( page = 1,2,3,4,5,...):

    url: http://localhost:[porta]/cliente/v1/?page=1&pageSize=2
    method: GET

    . Virá somente os registros da primeira página com 2 registros



Adicionando CACHE
-----------------

Adicionando Autorização e Autenticação com Token
------------------------------------------------

Adicionando Autorização e Autenticação com RefreshToken
-------------------------------------------------------

Adicionando Swagger
-------------------


Adicionando Compressão
----------------------
