. Acesse a pasta de projetos e digite o comando abaixo:

    dotnet new web -o Contrato -n contrato -f net5.0

. Acesse a pasta do projeto criado com o VSCode e execute os comandos abaixo:

    dotnet add package Microsoft.EntityFrameworkCore --version 5.0.9        

    dotnet add package Microsoft.EntityFrameworkCore.InMemory -- version 5.0.9

    # Se for usar o banco de dados SQL Server execute a linha abaixo
    #
    # dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 5.0.9

    dotnet add package Microsoft.EntityFrameworkCore.Design --version 5.0.9

    # Execute a linha abaixo caso o "dotnet-ef" não existir no ambiente
    dotnet tool install --global dotnet-ef --version 5.0.17

. Apague as classes abaixo:

    WeatherForecast.cs
    Controllers/WeatherForecastController.cs

. Crie a pasta "Models" na raiz do projeto.

. Crie as classes abaixo:

    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Threading.Tasks;

    namespace contrato.Models
    {

        [Table("cliente")]
        public class Cliente
        {
            [Key]
            [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
            [Column("codigo")]
            public int codigo { get; set; }      

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string cpf { get; set; }
            
            [Required(ErrorMessage="Este campo é obrigatorio")]
            [MaxLength(150, ErrorMessage="Este campo deve ter entre 5 a 150 caracateres")]
            [MinLength(5, ErrorMessage="Este campo dever ter entre 5 a 150 caracateres")]
            public string nome { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public DateTime? dataNascimento  { get; set; }

            public string rg { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string sexo { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string estadoCivil { get; set; }

            public string pai { get; set; }

            public string mae { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            [MaxLength(250, ErrorMessage="Este campo deve ter entre 5 a 150 caracateres")]
            [MinLength(5,ErrorMessage="Este campo deve ter entre 5 a 150 caracateres")]
            public string endereco { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            [MaxLength(100, ErrorMessage="Este campo deve ter entre 5 a 100 caracateres")]
            [MinLength(5,ErrorMessage="Este campo deve ter entre 5 a 100 caracateres")]
            public string cidade { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            [MaxLength(2, ErrorMessage="Este campo deve ter 2 caracateres")]
            [MinLength(2,ErrorMessage="Este campo deve ter 2caracateres")]
            public string estado { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string cep { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string telefone  { get; set; }

            public DateTime dataInclusao{ get; set; } = new Date();
        }
    }

. Crie a pasta "Data" dentro da raiz do projeto e dentro dela crie a classe abaixo:

    using System;
    using contrato.Models;
    using Microsoft.EntityFrameworkCore;

    namespace contrato.Data
    {
        public class AppDbContext: DbContext
        {
    /*      // Se for trbalhar com banco em memoria
            public AppDataContext( DbContextOptions<AppDataContext> options): base(options)
            {

            }
    */

            protected override void OnConfiguring( DbContextOptionsBuilder options ){
                options.UseSqLite("DataSource=app.db;Cache=Shared");            
                options.LogTo( Console.WriteLine );
            }

            public DbSet<Cliente> Clientes { get; set; }

        }
    }

. Na raiz do projeto execute os comandos abaixo:

    dotnet clean

    dotnet build

    dotnet add migrations add InitialCreation

    dotnet ef database update

. Atualize a estrutura do projeto, verifique se o arquivo do SqLite "app.db" foi criado com sucesso,
    instale alguma extensão do SqLite no VSCode para executar instruções DMLs e faça a consulta da 
    estrutura do banco nele.

. Crie a pasta "ViewModels" e insira as classes abaixo :

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;

    namespace contrato.ViewModels
    {
        public class ClienteViewModel
        {
            public string cpf { get; set; }
            public string nome { get; set; }
        }
    }



    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Threading.Tasks;

    namespace contrato.ViewModels
    {
        public class CreateClienteViewModel
        {
            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string cpf { get; set; }
            
            [Required(ErrorMessage="Este campo é obrigatorio")]
            [MaxLength(150, ErrorMessage="Este campo deve ter entre 5 a 150 caracateres")]
            [MinLength(5, ErrorMessage="Este campo dever ter entre 5 a 150 caracateres")]
            public string nome { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public DateTime? dataNascimento  { get; set; }

            public string rg { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string sexo { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string estadoCivil { get; set; }

            public string pai { get; set; }

            public string mae { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            [MaxLength(250, ErrorMessage="Este campo deve ter entre 5 a 150 caracateres")]
            [MinLength(5,ErrorMessage="Este campo deve ter entre 5 a 150 caracateres")]
            public string endereco { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            [MaxLength(100, ErrorMessage="Este campo deve ter entre 5 a 100 caracateres")]
            [MinLength(5,ErrorMessage="Este campo deve ter entre 5 a 100 caracateres")]
            public string cidade { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            [MaxLength(2, ErrorMessage="Este campo deve ter 2 caracateres")]
            [MinLength(2,ErrorMessage="Este campo deve ter 2caracateres")]
            public string estado { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string cep { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string telefone  { get; set; }

            public DateTime dataInclusao{ get; set; } = new Date();
        }
    }

. Acesse a pasta "Controllers"  crie a classe abaixo:

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using contrato.Data;
    using contrato.Models;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.EntityFrameworkCore;

    namespace contrato.Controllers
    {
        [ApiController]
        [Route("[controller]")]                                   
        public class ClienteController: ControllerBase
        {
/*          // Devido ao [FromServices] deixou de ser necessário este trecho de código
            private AppDataContext _context;

            public ClienteController( AppDataContext context )
            {
                _context = context;
            }
*/

            // A rota "v1" será o controle de versão
            [HttpGet("v1")]                                 
            public async Task<ActionResult<List<Cliente>>> GetAsync([FromServices] AppDataContext context)
            {
                var clientes = await context.Clientes
                                            .AsNoTracking()
                                            .ToListAsync();

                return Ok(clientes);
            }

            [HttpPost("v1")]
            public async Task<ActionResult<Cliente>> PostAsync(  [FromServices] AppDataContext context,
                                                                    [FromBody] CreateClienteViewModel model )
            {
                if (!ModelState.IsValid)
                    return BadRequest( ModelState );

                var cliente = new Cliente{
                                            cpf                 = model.cpf,
                                            nome                = model.nome,
                                            dataNascimento      = model.dataNascimento,
                                            rg                  = model.rg,
                                            sexo                = model.sexo,
                                            estadoCivil         = model.estadoCivil,
                                            pai                 = model.pai,
                                            mae                 = model.mae,
                                            endereco            = model.endereco,
                                            cidade              = model.cidade,
                                            estado              = model.estado,
                                            cep                 = model.cep,
                                            telefone            = model.telefone,
                                            dataInclusao        = DateTime.Now
                                        };

                try
                {
                    context.Clientes.AddAsync(model);
                    await context.SaveChangesAsync();

                    var createdResource = new { Id = 1, Version = "1.0" };

                    // Uri uri = new Uri($"https://localhost:5001/cliente/v1/cpf/{model.cpf}");
                    
                    // return Created(uri, model);
                    return Created( $"cliente/v1/cpf/{model.cpf}", model);
                } catch ( Exception ex)
                {
                    return BadRequest( ex.message );
                }

                // https://ochzhen.com/blog/created-createdataction-createdatroute-methods-explained-aspnet-core
                // https://www.macoratti.net/19/06/aspnc_3dwebapi1.htm
                // https://code-maze.com/net-core-web-development-part6/
            }  

            [HttpGet("v1/cpf/{cpf:string}")]
            // [HttpGet("{cpf:regex(^\\d{{3}}.\\d{{3}}.\\d{{3}}-\\d{{2}}$)}")]
            public async Task<ActionResult<Cliente>> GetByCpf([FromServices] AppDataContext context,  
                                                                [FromRoute] string cpf){ 

                var cliente = await context.Clientes
                                        .AsNoTracking()
                                        .FirstOrDefaultAsync(x => x.cpf ==  cpf );

                return cliente == null ? 
                                NotFound(new { Id = 1, error = $"Não foi encontrado cliente com o cpf {cpf}" }) : 
                                Ok(cliente);

            }

            [HttpGet("v1/nome/{nome:string}")]
            public async Task<ActionResult<List<Cliente>>> GetByName([FromServices] AppDataContext context, 
                                                                        [FromBody] ClienteViewModel viewModel, 
                                                                        [FromRoute] string nome)
            {
                var clientes = await context.Clientes
                                    .AsNoTracking()
                                    .Where( x => x.nome.ToUpper().Contains( viewModel.nome.ToUpper() ))
                                    .ToListAsync();
                                    // .FirstOrDefaultAsync( x => x.nome.Contains( viewModel.nome ) );

                return cliente == null ? 
                                NotFound(new { Id = 1, error =$"Não foi encontrado cliente com o nome {nome}" }) : 
                                Ok(cliente);
            }

            [HttpPut("v1/{cpf:string}")]
            public async Task<ActionResult<Cliente>> Put([FromServices] AppDataContext context,
                                                            [FromBody] CreateClienteViewModel model,
                                                            [FromRoute] string cpf )
            {
                if (!ModelState.IsValid)
                    return BadRequest( ModelState );

                var cliente = await context.Clientes
                                        .AsNoTracking()
                                        .FirstOrDefaultAsync(x => x.cpf ==  cpf );

                if ( cliente == null )
                    return NotFound();

                cliente.cpf                 = model.cpf,
                cliente.nome                = model.nome,
                cliente.dataNascimento      = model.dataNascimento,
                cliente.rg                  = model.rg,
                cliente.sexo                = model.sexo,
                cliente.estadoCivil         = model.estadoCivil,
                cliente.pai                 = model.pai,
                cliente.mae                 = model.mae,
                cliente.endereco            = model.endereco,
                cliente.cidade              = model.cidade,
                cliente.estado              = model.estado,
                cliente.cep                 = model.cep,
                cliente.telefone            = model.telefone,
                cliente.dataInclusao        = DateTime.Now

                try
                {
                    context.Clientes.Update(cliente);
                    await context.SaveChangesAsync();

                    return StatusCode( 201, cliente );
                } catch ( Exception ex)
                {
                    return BadRequest( ex.message );
                }
            }

            [HttpDelete("v1/{cpf:string})]
            public async Task<ActionResult> Delete([FromServices] AppDataContext context,
                                        string cpf)
            {
                try
                {
                    var clientes = context.Clientes
                                    .AsNoTracking()
                                    .Where( x => x.cpf == cpf )
                                    .ToList();

                    context.Clientes.Remove( clientes );

                    await context.SaveChangesAsync();

                    return StatusCode( 204, "Cliente eliminado com sucesso");
                } catch ( Exception ex)
                {
                    return BadRequest( ex.message );
                }
            }
        }
    }

    . Acesse a aula "Aula 36.  Padronizando erros" do curso "Fundamentos ASP.NET 6" e faça as 
        configurações para deixar a validação manual dentro dos controllers os models através 
        do método "ModelState.IsValid":

            ...
            if (!ModelState.IsValid)                        
                return BadRequest(new ResultViewModel<Category>(ModelState.GetErrors()));
            ...


. Acesse a classe "Startup.cs" e faça as alterações abaixo:

    ...
        public void ConfigureServices(IServiceCollection services)
        {

            // Se for trabalhar com banco em memória
            // services.AddDbContext<AppDataContext>(opt => opt.UseInMemoryDatabase("Database"));


            // Pode ser usado como abaixo, porém existe um método especial do tipo Scoped "services.AddDbContext<T>". Utilizado exclusivamente com o EF
            // 
            // services.AddScoped<AppDataContext, AppDataContext>();     


            // Garante que a conexão só dura até o fim da requisição
            //
            services.AddDbContext<AppDbContext>();   // Linha inserida

            services.AddControllers();

            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "Contrato", Version = "v1" });
            });
        }

        public void Configure( IApplicationBuilder app, IWebHostEnviroment env)
        {
            if (env.IsDevelopment() )
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseRouting();

            app.UseEndpoints( endpoints =:
            {
                endpoints.MapControllerRoute(
                    "default",
                    "{controller=Home}/{action=Index}/{Id?}"
                );
            });

        }
    ...

. Execute a aplicacao com o comando abaixo:

    dotnet build

    dotnet watch run

. Acesse o Postman e execute as URLs com os parâmetros abaixo:

    Method: POST
    URL: https://localhost:5001/cliente/v1
    Body.raw: 
                {
                    "cpf": "018.020.098-41",
                    "nome": "MARCIO VENEZIANO",
                    "dataNascimento": "1960-08-11T00:00:00",
                    "rg": "298655913",
                    "sexo": "M",
                    "estadoCivil": "OUTROS",
                    "pai": "ARTHUR VENEZIANO",
                    "mae": "BENEDITA DE OLIVEIRA",
                    "endereco": "R TAMBAU ",
                    "cidade": "GUARUJA",
                    "estado": "SP",
                    "cep": "11451170",
                    "telefone": "13 30174206"
                }    
    JSON:   true

    Method: GET
    URL: https://localhost:5001/cliente/v1
    Body.none

    Method: GET
    URL: https://localhost:5001/cliente/v1/cpf/049.045.238-81
    Body.None: True

    Method: GET
    URL: https://localhost:5001/cliente/v1/cpf
    Body.raw: { "cpf": "049.045.238-81"}

    Method: GET
    URL: https://localhost:5001/cliente/v1/nome
    Body.raw: { "nome": "MARCO" }

    Method: PUT
    URL: https://localhost:5001/cliente/v1
    Body.raw:     {
                    "codigo": "317282",
                    "cpf": "106.523.608-60",
                    "nome": "MARCO A DA SILVA",
                    "dataNascimento": "1966-10-17T00:00:00",
                    "rg": "16531421",
                    "sexo": "M",
                    "estadoCivil": "CASADO",
                    "pai": "LOURIVAL MARINHO SILVA",
                    "mae": "BENEDITA ABRANTES SILVA",
                    "endereco": "R CARIOBA 360 ",
                    "cidade": "SÃO PAULO",
                    "estado": "SP",
                    "cep": "02423100",
                    "telefone": "11 9 8336-1336"
                }

    Method: DELETE
    URL: https://localhost:5001/v1/clientes/106.523.608-58
    Body.None: true


