Tutorial Criando uma API com ASP.NET Core 5 e EF Core 5
-------------------------------------------------------

https://www.youtube.com/watch?v=but7jqjopKM&list=PL7yxJa4Na-ir9DLuPL_8kYhyHJXCoPyaR&index=67&t=192s
https://www.youtube.com/watch?v=G0yi5PTzhLA
https://www.youtube.com/watch?v=J-mC0i_R72M

. Acesse a pasta de projetos e digite o comando abaixo:

    dotnet new webapi -o contrato -n Contrato -f net5.0

. Acesse a pasta do projeto criado com o VSCode e execute os comandos abaixo:

    dotnet add package Microsoft.EntityFrameworkCore --version 5.0.5

    dotnet add package Microsoft.EntityFrameworkCore --version 5.0.9        


    # Se for usar o banco de dados em memória execute a linha abaixo
    #
    # dotnet add package Microsoft.EntityFrameworkCore.InMemory -- version 5.0.9

    dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 5.0.9

    dotnet add package Microsoft.EntityFrameworkCore.Design --version 5.0.9

    dotnet tool install --global dotnet-ef --version 5.0.17

. Apague as classes abaixo:

    WeatherForecast.cs
    Controllers/WeatherForecastController.cs

. Crie a pasta "Models" na raiz do projeto.

. Crie a classe abaixo:

    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Threading.Tasks;

    namespace contrato.Models
    {

        [Table("cliente")]
        public class Cliente
        {
            [Key]
            // [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
            [Column("codigo")]
            public int codigo { get; set; }      

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string cpf { get; set; }
            
            [Required(ErrorMessage="Este campo é obrigatorio")]
            [MaxLength(150, ErrorMessage="Este campo deve ter entre 5 a 150 caracateres")]
            [MinLength(5, ErrorMessage="Este campo dever ter entre 5 a 150 caracateres")]
            public string nome { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public DateTime? dataNascimento  { get; set; }

            public string rg { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string sexo { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string estadoCivil { get; set; }

            public string pai { get; set; }

            public string mae { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            [MaxLength(250, ErrorMessage="Este campo deve ter entre 5 a 150 caracateres")]
            [MinLength(5,ErrorMessage="Este campo deve ter entre 5 a 150 caracateres")]
            public string endereco { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            [MaxLength(100, ErrorMessage="Este campo deve ter entre 5 a 100 caracateres")]
            [MinLength(5,ErrorMessage="Este campo deve ter entre 5 a 100 caracateres")]
            public string cidade { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            [MaxLength(2, ErrorMessage="Este campo deve ter 2 caracateres")]
            [MinLength(2,ErrorMessage="Este campo deve ter 2caracateres")]
            public string estado { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string cep { get; set; }

            [Required(ErrorMessage="Este campo é obrigatorio")]
            public string telefone  { get; set; }


        }
    }

    *********** Voltar na posição 2 minutos do vídeo e adicione também a classe contrato

. Crie a pasta "Data" dentro da raiz do projeto e dentro dela crie a classe abaixo:

    using System;
    using contrato.Models;
    using Microsoft.EntityFrameworkCore;

    namespace contrato.Data
    {
        public class DataContext: DbContext
        {
    /*      // Se for trbalhar com banco em memoria
            public DataContext( DbContextOptions<DataContext> options): base(options)
            {

            }
    */

            protected override void OnConfiguring( DbContextOptionsBuilder options ){
                options.UseSqlServer("Server=localhost,1433;Database=Blog;User ID=sa;Password=Joao3.16");            
                options.LogTo( Console.WriteLine );
            }

            public DbSet<Cliente> Clientes { get; set; }

        }
    }


. Acesse a classe "Startup.cs" e faça as alterações abaixo:

    ...
        public void ConfigureServices(IServiceCollection services)
        {

            // Se for trabalhar com banco em memória
            // services.AddDbContext<DataContext>(opt => opt.UseInMemoryDatabase("Database"));


            // Pode ser usado como abaixo, porém existe um método especial do tipo Scoped "services.AddDbContext<T>". Utilizado exclusivamente com o EF
            // 
            // services.AddScoped<DataContext, DataContext>();     


            // Garante que a conexão só dura até o fim da requisição
            //
            services.AddDbContext<DataContext>();   // Linha inserida

            services.AddControllers();

            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "Contrato", Version = "v1" });
            });
        }

. Acesse a pasta "Controllers"  crie a classe abaixo:

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using contrato.Data;
    using contrato.Models;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.EntityFrameworkCore;

    namespace contrato.Controllers
    {
        [ApiController]
        [Route("[controller]")]                                   
        public class ClienteController: ControllerBase
        {
/*          // Devido ao [FromServices] deixou de ser necessário este trecho de código
            private DataContext _context;

            public ClienteController( DataContext context )
            {
                _context = context;
            }
*/

            // A rota "v1" será o controle de versão
            [HttpGet("v1")]                                 
            public async Task<ActionResult<List<Cliente>>> Get([FromServices] DataContext context)
            {
                var clientes = await context.Clientes.ToListAsync();

                return clientes;
            }

            [HttpPost("v1")]
            public async Task<ActionResult<Cliente>> Post(  [FromServices] DataContext context,
                                                            [FromBody] Cliente model )
            {
                if (ModelState.IsValid)
                {
                    context.Clientes.Add(model);
                    await context.SaveChangesAsync();

                    var createdResource = new { Id = 1, Version = "1.0" };
                    Uri uri = new Uri($"https://localhost:5001/cliente/v1/{model.cpf}");
            
                    // https://ochzhen.com/blog/created-createdataction-createdatroute-methods-explained-aspnet-core
                    // https://www.macoratti.net/19/06/aspnc_3dwebapi1.htm
                    // https://code-maze.com/net-core-web-development-part6/
                    return Created(uri, model);

                }
                else
                {
                    return BadRequest( ModelState );
                }
            }                                                            

        }
    }

    . Acesse a aula "Aula 36.  Padronizando erros" do curso "Fundamentos ASP.NET 6" e faça as 
        configurações para deixar a validação manual dentro dos controllers os models através 
        do método "ModelState.IsValid":

            ...
            if (!ModelState.IsValid)                        
                return BadRequest(new ResultViewModel<Category>(ModelState.GetErrors()));
            ...

9.00

. Execute a aplicacao com o comando abaixo:

    dotnet build

    dotnet watch run

. Acesse o Postman e execute as URLs com os parâmetros abaixo:

    Method: POST
    URL: https://localhost:5001/cliente/v1
    Body.raw: 
                {
                    "cpf": "018.020.098-41",
                    "nome": "MARCIO VENEZIANO",
                    "dataNascimento": "1960-08-11T00:00:00",
                    "rg": "298655913",
                    "sexo": "M",
                    "estadoCivil": "OUTROS",
                    "pai": "ARTHUR VENEZIANO",
                    "mae": "BENEDITA DE OLIVEIRA",
                    "endereco": "R TAMBAU ",
                    "cidade": "GUARUJA",
                    "estado": "SP",
                    "cep": "11451170",
                    "telefone": "13 30174206"
                }    
    JSON:   true



    Method: GET
    URL: https://localhost:5001/cliente/v1
    Body.none

. Adicione o método abaixo na classe "ClienteController.cs"

    [HttpGet("v1/{cpf:string}")]
    // [HttpGet("{cpf:regex(^\\d{{3}}.\\d{{3}}.\\d{{3}}-\\d{{2}}$)}")]
    public async Task<ActionResult<Cliente>> GetByCpf([FromServices] DataContext context,  string cpf){ 

        var cliente = await context.Clientes
                                .AsNoTracking()
                                .FirstOrDefaultAsync(x => x.cpf ==  cpf );

        if (cliente == null){
            return NotFound(new { Id = 1, error = $"Não foi encontrado cliente com o cpf {cpf}" });
        }

            return Ok(cliente);
    }

. Acesse o Postman e execute as URLs com os parâmetros abaixo:

    Method: GET
    URL: https://localhost:5001/v1/cliente/049.045.238-81
    Body.None: True

. Insira a classe abaixo na pasta "Models":

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;

    namespace contrato.Models
    {
        public class ClienteViewModel
        {
            public string cpf { get; set; }
            public string nome { get; set; }
        }
    }

. Substitua o método "GetByCpf" pelo abaixo na classe "ClienteController.cs"

    [HttpGet("v1/cpf")]
    public async Task<ActionResult<Cliente>> GetByCpf([FromServices] DataContext context,  ClienteViewModel viewModel){

        var cliente = await context.Clientes
                                .AsNoTracking()
                                .Where(x => x.cpf ==  viewModel.cpf )
                                .ToListAsync();

        if (clientes.Count == 0){
            return NotFound(new { Id = 1, error = $"Não foi encontrado cliente com o cpf {viewModel.cpf}" });
        }

        return Ok(clientes);
    }

. Acesse o Postman e execute as URLs com os parâmetros abaixo:

    Method: GET
    URL: https://localhost:5001/v1/cliente/cpf
    Body.raw: { "cpf": "049.045.238-81"}


. Adicione o método abaixo na classe "ClienteController.cs"

    [HttpGet("v1/nome")]
    public async Task<ActionResult<List<Cliente>>> GetByName([FromServices] DataContext context, ClienteViewModel viewModel, string nome)
    {
        var clientes = await context.Clientes
                            .AsNoTracking()
                            .Where( x => x.nome.ToUpper().Contains( viewModel.nome.ToUpper() ))
                            .ToListAsync();
                            // .FirstOrDefaultAsync( x => x.nome.Contains( viewModel.nome ) );

        if (clientes.Count == 0){
            return NotFound(new { Id = 1, error = $"Não foi encontrado cliente com o cpf {viewModel.cpf}" });
        }

        return Ok(clientes);
    }

. Acesse o Postman e execute as URLs com os parâmetros abaixo:

    Method: GET
    URL: https://localhost:5001/cliente/v1/nome
    Body.raw: { "nome": "MARCO" }


. Adicione o método abaixo na classe "ClienteController.cs"

    [HttpPut("v1")]
    public async Task<ActionResult<Cliente>> Put([FromServices] DataContext context,
                                                    [FromBody] Cliente model )
    {
        context.Clientes.Update(model);
        await context.SaveChangesAsync();

        Uri uri = new Uri($"https://localhost:5001/cliente/v1/{model.cpf}");

        return Created(uri, model);
    }

. Acesse o Postman e execute as URLs com os parâmetros abaixo:

    Method: PUT
    URL: https://localhost:5001/cliente/v1
    Body.raw:     {
                    "codigo": "317282",
                    "cpf": "106.523.608-60",
                    "nome": "MARCO A DA SILVA",
                    "dataNascimento": "1966-10-17T00:00:00",
                    "rg": "16531421",
                    "sexo": "M",
                    "estadoCivil": "CASADO",
                    "pai": "LOURIVAL MARINHO SILVA",
                    "mae": "BENEDITA ABRANTES SILVA",
                    "endereco": "R CARIOBA 360 ",
                    "cidade": "SÃO PAULO",
                    "estado": "SP",
                    "cep": "02423100",
                    "telefone": "11 9 8336-1336"
                }

. Adicione o método abaixo na classe "ClienteController.cs"

    [HttpDelete("v1/{cpf:string})]
    public async Task<ActionResult> Delete([FromServices] DataContext context,
                                string cpf)
    {
        var clientes = context.Clientes
                        .AsNoTracking()
                        .Where( x => x.cpf == cpf )
                        .ToList();

        context.Clientes.RemoveRange( clientes );

        await context.SaveChangesAsync();

        return NoContent();
    }

. Acesse o Postman e execute as URLs com os parâmetros abaixo:

    Method: DELETE
    URL: https://localhost:5001/v1/clientes/106.523.608-58
    Body.None: true







// Parei ao 9.30 
https://docs.microsoft.com/pt-br/aspnet/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2#route-constraints
https://www.macoratti.net/19/08/aspnc_restrota1.htm
https://ochzhen.com/blog/created-createdataction-createdatroute-methods-explained-aspnet-core
https://www.macoratti.net/19/06/aspnc_3dwebapi1.htm

https://code-maze.com/net-core-web-development-part6/
